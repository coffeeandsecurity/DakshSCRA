<root>
    <rule>
        <name>Tainted Inputs: $_REQUEST</name>
        <regex>\$_REQUEST</regex>
        <rule_desc>Detects the usage of the $_REQUEST superglobal, which can introduce tainted inputs into the code.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of using user input from the $_REQUEST superglobal without proper validation and sanitization. Attackers can manipulate request parameters to provide malicious or unexpected values, potentially leading to security vulnerabilities such as injection attacks (SQL, OS, or LDAP), cross-site scripting (XSS), or remote code execution.</vuln_desc>
        <developer>Developers should validate and sanitize user input received from the $_REQUEST superglobal before using it in any sensitive operations. They should implement strong input validation, ensuring that only expected and sanitized values are accepted from requests. Additionally, developers should be cautious about the potential risks associated with using user-supplied data and follow secure coding practices, such as parameterized queries, output encoding, and appropriate input filtering techniques, depending on the context in which the input is used.</developer>
        <reviewer>Reviewers should ensure that proper input handling is in place for the $_REQUEST superglobal. They should verify that developers have implemented appropriate input validation and sanitization techniques to prevent security vulnerabilities related to tainted inputs. Reviewers should also assess the sensitivity of the data handled through requests and confirm that relevant security measures, such as output encoding and protection against injection attacks, are implemented correctly.</reviewer>
    </rule>
    <rule>
        <name>Tainted Inputs: $_GET</name>
        <regex>\$_GET</regex>
        <rule_desc>Identifies the usage of the $_GET superglobal, which may lead to tainted inputs being used in the code.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of using user input from the $_GET superglobal without proper validation and sanitization. Attackers can manipulate URL parameters to provide malicious or unexpected values, potentially leading to security vulnerabilities such as injection attacks (SQL, OS, or LDAP), cross-site scripting (XSS), or unauthorized access to sensitive information.</vuln_desc>
        <developer>Developers should carefully validate and sanitize user input received from the $_GET superglobal before using it in any sensitive operations. They should implement strong input validation, ensuring that only expected and sanitized values are accepted from URL parameters. Additionally, developers should be aware of the risks associated with using user-supplied data and follow secure coding practices, such as parameterized queries, output encoding, and appropriate input filtering techniques, depending on the context in which the input is used.</developer>
        <reviewer>Reviewers should check for appropriate input handling for the $_GET superglobal. They should assess if developers have implemented proper input validation and sanitization techniques to prevent security vulnerabilities related to tainted inputs. Reviewers should also verify the usage of output encoding and protection against injection attacks to ensure the secure handling of user input received through URL parameters.</reviewer>
    </rule>
    <rule>
        <name>Tainted Inputs: $_COOKIE</name>
        <regex>\$_COOKIE</regex>
        <rule_desc>Detects the usage of the $_COOKIE superglobal, which can introduce tainted inputs into the code.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of using user input from the $_COOKIE superglobal without proper validation and sanitization. Attackers can manipulate cookies to provide malicious or unexpected values, potentially leading to security vulnerabilities such as session hijacking, privilege escalation, or information disclosure.</vuln_desc>
        <developer>Developers should validate and sanitize user input received from the $_COOKIE superglobal before using it in any sensitive operations. They should implement strong input validation, ensuring that only expected and sanitized values are accepted from cookies. Additionally, developers should be cautious about the potential risks associated with using cookies for sensitive data or session management and follow secure coding practices and guidelines.</developer>
        <reviewer>Reviewers should ensure that proper input handling is in place for the $_COOKIE superglobal. They should verify that developers have implemented appropriate input validation and sanitization techniques to prevent security vulnerabilities related to tainted inputs. Reviewers should also assess the sensitivity of the data handled through cookies and confirm that relevant security measures, such as secure session management, are implemented correctly.</reviewer>
    </rule>
    <rule>
        <name>Command Injection: shell_exec|exec|passthru|system|popen|backtick</name>
        <regex>(shell_exec|exec|passthru|system|popen|`)\(</regex>
        <rule_desc>Detects instances of shell-executing functions that can lead to command injection vulnerabilities if used with user-supplied input.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of command injection. Attackers can exploit shell-executing functions with unsanitized user input to execute arbitrary shell commands on the server. This can lead to unauthorized access, data loss, remote code execution, or other malicious activities depending on the context in which the commands are executed.</vuln_desc>
        <developer>Developers should avoid using shell-executing functions with user-supplied input whenever possible. If their usage is necessary, it is crucial to employ strict input validation, input sanitization, and command parameterization techniques to prevent command injection attacks. Developers should also consider using safer alternatives, such as APIs with built-in security features or language constructs that mitigate command execution risks.</developer>
        <reviewer>Reviewers should check for the secure usage of shell-executing functions and assess if user input is properly validated, sanitized, and appropriately used as command parameters. They should ensure that developers have implemented strong input validation measures, command parameterization techniques, and proper context-aware security controls to mitigate command injection vulnerabilities. Reviewers should also validate if safe alternatives or language constructs have been considered to minimize the risks associated with shell command execution.</reviewer>
    </rule>
    <rule>
        <name>Arbitrary Code Execution: eval|exec</name>
        <regex>\b(?:eval|exec)\b</regex>
        <rule_desc>Detects the usage of eval() and exec() functions, which can lead to arbitrary code execution vulnerabilities.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of code injection. Attackers can exploit these functions to execute arbitrary code, potentially gaining unauthorized access, compromising data integrity, or executing malicious actions on the server.</vuln_desc>
        <developer>Developers should avoid using eval() and exec() functions whenever possible. If their usage is unavoidable, it is crucial to validate and sanitize any user-supplied input before passing it to these functions. Developers should explore safer alternatives or restrict the execution to a limited and controlled environment.</developer>
        <reviewer>Reviewers should identify the presence of eval() and exec() functions and assess if user input is directly passed to these functions. They should verify that proper input validation and sanitization are applied to mitigate the risk of arbitrary code execution vulnerabilities. Additionally, reviewers should encourage the use of safer alternatives and evaluate the execution context to minimize potential harm.</reviewer>
    </rule>
    <rule>
        <name>Insecure Method Call: preg_replace()</name>
        <regex>preg_replace\s*\(\s*['"](eval|assert|system|passthru|shell_exec|exec|popen|proc_open|pcntl_exec)['"]\s*,\s*\$([^\s,]*)\s*\)</regex>
        <rule_desc>Detects insecure usage of the preg_replace() function with potentially dangerous replacement parameters.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of code injection. Attackers can exploit the insecure usage of preg_replace() to execute arbitrary code by providing malicious replacement parameters, such as eval, assert, system, passthru, shell_exec, exec, popen, proc_open, or pcntl_exec.</vuln_desc>
        <developer>Developers should avoid using user input directly as the replacement parameter in preg_replace(). Instead, they should validate and sanitize the input before incorporating it into the function call. It is important to restrict the allowed replacement parameters to prevent code injection attacks.</developer>
        <reviewer>Reviewers should identify the usage of preg_replace() and check if user input is used as the replacement parameter. They should ensure that input validation and sanitization are implemented to mitigate the risk of code injection vulnerabilities. Reviewers should also confirm that the replacement parameters are restricted to safe and trusted values.</reviewer>
    </rule>
    <rule>
        <name>Insecure Method Call: header()</name>
        <regex>header\s*\(\s*['\"]\s*Location\s*:\s*</regex>
        <rule_desc>Detects insecure usage of the header() function, specifically related to the "Location" parameter.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of insecure header redirection. Attackers can manipulate the "Location" parameter in header() calls to redirect users to malicious websites or perform phishing attacks.</vuln_desc>
        <developer>Developers should ensure that any user input used in the "Location" parameter of header() calls is properly validated, sanitized, and restricted to trusted values. They should also consider using security libraries or frameworks that provide safer methods for handling redirects.</developer>
        <reviewer>Reviewers should identify the usage of header() with the "Location" parameter and verify that input validation and sanitization are applied to prevent header injection vulnerabilities. They should also check if a secure redirect mechanism is used to mitigate the risk of unauthorized redirects.</reviewer>
    </rule>
    <rule>
        <name>Insecure Method Call: include() and require()</name>
        <regex>\b(?:include|require)(_once)?\s*\(\s*(?:(?:\'[^\']*\'|\"[^\"]*\")\s*\.\s*)?\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)\s*(?:\.\s*(?:\'[^\']*\'|\"[^\"]*\"))?\s*\)</regex>
        <rule_desc>Detects insecure usage of the include() and require() functions, particularly when loading files based on user input.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of file inclusion attacks. Attackers can manipulate user-supplied input to include arbitrary files, leading to unauthorized access, code execution, or sensitive information disclosure.</vuln_desc>
        <developer>Developers should avoid using user input directly in the path of include() and require() statements. They should carefully validate and sanitize any user input before incorporating it into file inclusion operations. Additionally, developers should consider using whitelisting or safe alternatives to dynamically include files.</developer>
        <reviewer>Reviewers should identify the presence of include() and require() functions and check if user input is used in the file path. They should verify that proper input validation and sanitization are implemented to mitigate the risk of file inclusion vulnerabilities. Additionally, reviewers should confirm the usage of secure coding practices such as whitelisting or safe alternatives for dynamic file inclusion.</reviewer>
    </rule>
    <rule>
        <name>Insecure Method Call: extract()</name>
        <regex>extract\s*\(\s*(\$_(GET|POST|REQUEST)|\$\{?(?:_[a-zA-Z0-9_]+|[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)\}?)\s*,\s*(?:\s*EXTR_(?:OVERWRITE|SKIP|PREFIX_SAME|PREFIX_ALL|IF_EXISTS|IF_DOESNT_EXIST|PREFIX_INVALID))*</regex>
        <rule_desc>Detects insecure usage of the extract() function, which can introduce security vulnerabilities.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of variable overwrite or injection. Attackers can manipulate the extracted variables and introduce unexpected behavior, overwrite existing variables, or introduce new variables with unintended values.</vuln_desc>
        <developer>Developers should avoid using the extract() function, especially with user-supplied arrays as the first parameter. Instead, they should access array elements explicitly and validate/sanitize user input before incorporating it into variable assignments.</developer>
        <reviewer>Reviewers should identify the presence of the extract() function and ensure that it is not used with user-supplied arrays. They should also verify that input validation and sanitization are performed before assigning values to variables to prevent security vulnerabilities arising from variable overwrite or injection.</reviewer>
    </rule>
    <rule>
        <name>Insecure Method Call: assert()</name>
        <regex>assert\s*\(\s*(\$_(GET|POST|REQUEST)|\$\{?(?:_[a-zA-Z0-9_]+|[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)\}?)</regex>
        <rule_desc>Detects insecure usage of the assert() function, which can lead to code injection vulnerabilities.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of code injection. Attackers can exploit the assert() function with unvalidated user input to execute arbitrary code on the server, compromising the application's security.</vuln_desc>
        <developer>Developers should avoid using the assert() function, especially with untrusted user input. It is crucial to validate and sanitize any data used in assert() statements, or consider using alternative methods for code assertions and error handling.</developer>
        <reviewer>Reviewers should identify the presence of the assert() function and ensure that it is not used with unvalidated user input. They should also verify that input validation and sanitization measures are in place to mitigate code injection vulnerabilities arising from assert() statements.</reviewer>
    </rule>
    <rule>
        <name>Deprecated MySQL Query Functions</name>
        <regex>\b(mysql_query|mysqli_query)\b</regex>
        <rule_desc>Detects the usage of deprecated MySQL query functions, which can lead to security vulnerabilities.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of SQL injection or other security issues. Attackers can exploit insecure MySQL queries to manipulate database operations, retrieve unauthorized data, or perform malicious actions.</vuln_desc>
        <developer>Developers should migrate to modern and secure database APIs, such as PDO or MySQLi, and use prepared statements or parameterized queries to prevent SQL injection vulnerabilities. It is important to sanitize and validate user input before incorporating it into database queries.</developer>
        <reviewer>Reviewers should ensure that deprecated MySQL query functions, such as mysql_query() or mysqli_query(), are replaced with secure alternatives. They should also verify the presence of proper input validation, query parameterization, and adherence to secure coding practices to mitigate SQL injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Regular Expression Injection: preg_replace with /e Modifier</name>
        <regex>preg_replace\(.\W+e\W,</regex>
        <regex>preg_replace\(\$_GET</regex>
        <rule_desc>Detects the usage of preg_replace() function with the /e modifier, which can introduce regular expression injection vulnerabilities.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of regular expression injection. Attackers can exploit insecure use of preg_replace() with the /e modifier to execute arbitrary code, leading to remote code execution, information disclosure, or other security risks.</vuln_desc>
        <developer>Developers should avoid using the /e modifier with preg_replace() function due to its deprecated and dangerous nature. Instead, they should utilize other secure alternatives, such as preg_replace_callback(), and ensure that user input passed to regular expressions is properly validated, sanitized, and limited to the intended scope.</developer>
        <reviewer>Reviewers should identify the presence of preg_replace() function with the /e modifier and suggest replacing it with safer alternatives. They should also ensure that any user input used in regular expressions is correctly validated, sanitized, and confined within appropriate boundaries to prevent regular expression injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Object Injection via Serialization</name>
        <regex>\b(?:unserialize|serialize)\b</regex>
        <rule_desc>Detects the usage of unserialize() or serialize() functions, which can introduce object injection vulnerabilities if not properly validated.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of object injection. Attackers can exploit insecure deserialization by manipulating serialized data to execute arbitrary code, escalate privileges, or perform other malicious actions.</vuln_desc>
        <developer>Developers should be cautious when using unserialize() or serialize() functions and ensure that any serialized data is properly validated and comes from a trusted source. Implementing secure deserialization practices and input validation can help mitigate object injection vulnerabilities.</developer>
        <reviewer>Reviewers should examine the implementation of unserialize() or serialize() functions to verify the presence of secure deserialization practices. They should also ensure that the serialized data is properly validated and comes from a trusted source, and that the codebase follows secure coding guidelines to prevent object injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Cross-Site Scripting (XSS) via PHP_SELF</name>
        <regex>\$_SERVER\['PHP_SELF']</regex>
        <rule_desc>Detects the usage of the PHP_SELF variable in the context of cross-site scripting (XSS) vulnerabilities.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of cross-site scripting (XSS). Attackers can exploit the PHP_SELF variable to inject malicious scripts into web pages and potentially steal sensitive user information or perform unauthorized actions on behalf of the user.</vuln_desc>
        <developer>Developers should avoid directly using the PHP_SELF variable to generate URLs or include it in output without proper sanitization and encoding to mitigate cross-site scripting (XSS) vulnerabilities. It is recommended to use alternative methods, such as carefully constructing URLs or relying on server-side frameworks that handle URL generation securely.</developer>
        <reviewer>Reviewers should verify that the PHP_SELF variable is not directly used in generating URLs or output without proper sanitization and encoding. They should also ensure that other security measures, such as input validation and output escaping, are implemented to prevent XSS vulnerabilities in the codebase.</reviewer>
    </rule>
    <rule>
        <name>SELECT [*] FROM [anytable] WHERE</name>
        <regex>SELECT\s+?[^\s]+?\s+?FROM\s+?[^\s]+?\s+?WHERE.*</regex>
        <rule_desc>Detects instances of SELECT statements in SQL queries that retrieve data from a table with a WHERE clause.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of SQL injection. Attackers can exploit this vulnerability to manipulate the WHERE clause and perform unauthorized data retrieval or modification.</vuln_desc>
        <developer>Developers should ensure that SQL queries using SELECT statements with a WHERE clause are properly parameterized or sanitized to prevent SQL injection attacks.</developer>
        <reviewer>Reviewers should verify the presence of secure coding practices, such as parameterized queries or proper input validation and sanitization, to mitigate the risk of SQL injection vulnerabilities in SELECT statements with a WHERE clause.</reviewer>
    </rule>
    <rule>
        <name>SELECT ORDERBY</name>
        <regex>(SELECT).*(ORDER BY).*</regex>
        <rule_desc>Detects instances of SELECT statements in SQL queries that include an ORDER BY clause.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of SQL injection. Attackers can exploit this vulnerability to manipulate the ORDER BY clause and potentially alter the query results or introduce additional malicious functionality.</vuln_desc>
        <developer>Developers should ensure that SQL queries using SELECT statements with an ORDER BY clause are properly parameterized or sanitized to prevent SQL injection attacks.</developer>
        <reviewer>Reviewers should verify the presence of secure coding practices, such as parameterized queries or proper input validation and sanitization, specifically for SELECT statements that include an ORDER BY clause, to mitigate the risk of SQL injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Insecure Mitigation: SQL Injection (mysql_real_escape_string)</name>
        <regex>mysql_real_escape_string</regex>
        <rule_desc>Detects the usage of the mysql_real_escape_string function for SQL injection mitigation.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of SQL injection. Attackers can bypass the protection provided by mysql_real_escape_string and still execute SQL injection attacks if not used correctly.</vuln_desc>
        <developer>Developers should avoid relying solely on mysql_real_escape_string for SQL injection mitigation. Instead, they should use parameterized queries or prepared statements with bound parameters to ensure proper defense against SQL injection attacks.</developer>
        <reviewer>Reviewers should carefully examine the usage of mysql_real_escape_string and verify if additional secure coding practices, such as parameterized queries, are implemented alongside it to provide robust protection against SQL injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Mitigation Identified: XSS</name>
        <regex>htmlentities</regex>
        <rule_desc>Specify briefly what does this rule does</rule_desc>
        <vuln_desc>This is a recommended mitigation. There is issue if this mitigation is appropriately implemented.</vuln_desc>
        <developer>Ensure this mitigation is adequately implemented and consistent across the application.</developer>
        <reviewer>Check if this mitigation is adequately implemented and consistent across the application.</reviewer>
    </rule>
</root>


