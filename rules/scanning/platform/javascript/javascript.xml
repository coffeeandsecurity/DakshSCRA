<root>
    <category name="Untrusted Input Handling or Injection Flaws">
        <rule>
            <name>Untrusted Data in 'document.getElementById().value'</name>
            <regex>document\.getElementById\(.+\)\.value</regex>
            <rule_desc>Detects the usage of unvalidated input.</rule_desc>
            <vuln_desc>This rule matches instances where user input obtained from `document.getElementById().value` is used without proper validation. Unvalidated input can lead to security vulnerabilities such as injection attacks, cross-site scripting (XSS), and improper data handling.</vuln_desc>
            <developer>Developers should validate and sanitize user input obtained through `document.getElementById().value` before using it in any sensitive operations. They should implement input validation techniques appropriate for the expected input, such as data type checking, length validation, and character filtering.</developer>
            <reviewer>Reviewers should ensure that proper input handling is in place for user input obtained through `document.getElementById().value`. They should verify that developers have implemented appropriate input validation and sanitization techniques to prevent security vulnerabilities related to unvalidated input.</reviewer>
        </rule>

        <rule>
            <name>Untrusted Data in InnerHTML</name>
            <regex>\.innerHTML\s?=\s?.+</regex>
            <rule_desc>Detects potential security risks when assigning untrusted data to the innerHTML property.</rule_desc>
            <vuln_desc>This rule matches instances where potentially untrusted data is assigned to the innerHTML property. Assigning untrusted data directly to innerHTML can lead to cross-site scripting (XSS) vulnerabilities if proper input validation and output encoding are not performed.</vuln_desc>
            <developer>Developers should avoid assigning untrusted data directly to the innerHTML property. They should implement proper input validation and output encoding techniques when updating the content of elements via innerHTML to prevent XSS vulnerabilities.</developer>
            <reviewer>Reviewers should verify if potentially untrusted data is assigned to the innerHTML property. They should assess if the code implements proper input validation and output encoding techniques to prevent XSS vulnerabilities when updating element content.</reviewer>
        </rule>
        
        <rule>
            <name>Untrusted Data in 'document.write'</name>
            <regex>document\.write\(|innerHTML\s?=\s?.+</regex>
            <rule_desc>Detects potential DOM-based cross-site scripting (XSS) vulnerabilities.</rule_desc>
            <vuln_desc>This rule matches instances where the `document.write()` function or the assignment of potentially untrusted values to the `innerHTML` property is performed. These actions can introduce DOM-based cross-site scripting vulnerabilities if proper input validation and output encoding are not applied.</vuln_desc>
            <developer>Developers should avoid using `document.write()` and should implement appropriate input validation and output encoding techniques when assigning values to the `innerHTML` property. They should ensure that user-supplied data is properly sanitized and encoded to prevent XSS attacks.</developer>
            <reviewer>Reviewers should verify if the code uses `document.write()` or assigns potentially untrusted values to the `innerHTML` property. They should assess if proper input validation and output encoding techniques are implemented to prevent DOM-based cross-site scripting vulnerabilities.</reviewer>
        </rule>
    </category>

    <category name="Untrusted Input in Web/API Response">
        <rule>
            <name>Handlebars Unescaped String</name>
            <regex>\{\{\{.*?\}\}\}</regex>
            <description>Detects unescaped Handlebars strings in code.</description>
            <rule_desc>Detects instances of unescaped Handlebars strings in the code, which can indicate a potential security vulnerability.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential vulnerability of unescaped Handlebars strings in the code. Unescaped strings can lead to cross-site scripting (XSS) vulnerabilities if user input is not properly escaped or sanitized before rendering.</vuln_desc>
            <developer>Developers should ensure that user input used with Handlebars strings is properly sanitized or escaped to prevent XSS attacks. Handlebars provides built-in mechanisms for escaping user input, but triple curly braces can bypass this. Developers should follow secure coding practices and sanitize or escape user-generated content before using it in Handlebars strings.</developer>
            <reviewer>Reviewers should verify that proper input sanitization techniques are applied when using Handlebars strings. They should ensure that developers use Handlebars' built-in escaping mechanisms or equivalent custom sanitization methods to mitigate the risk of XSS vulnerabilities. Reviewers should also assess the implementation of output encoding and confirm that user input is properly sanitized before rendering it in the application.</reviewer>
        </rule>
    </category>
    
    <category name="Insecure Method/Function Call">
        <rule>
            <name>Insecure Method Call: child_process.exec()</name>
            <regex>(^|\s|=\s?)require\(\s*('|")child_process('|")\s*\)(\s*\.(\s*\w+\s*)*\()?\s*\)</regex>
            <rule_desc>Detects the usage of the `require('child_process')` statement with the `exec()` function, which can introduce remote OS command execution vulnerabilities.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential vulnerability of using the `child_process.exec()` function to execute operating system commands. Attackers can manipulate user input or crafted data to execute arbitrary commands on the host system, leading to unauthorized access, data breaches, or system compromise.</vuln_desc>
            <developer>Developers should exercise caution when using the `child_process.exec()` function and ensure that any user input passed to it is properly validated, sanitized, and restricted to prevent command injection vulnerabilities. It is recommended to use safer alternatives, such as using predefined functions or libraries specifically designed for safe command execution or employing proper input validation and sanitization techniques.</developer>
            <reviewer>Reviewers should verify whether the code implements sufficient measures to prevent remote OS command execution vulnerabilities. They should check whether the usage of `child_process.exec()` is necessary, and if so, ensure that proper input validation, sanitization, and command parameterization techniques are implemented to prevent command injection attacks. Reviewers should also assess the context in which this function is used and verify that security best practices are followed to mitigate any potential risks.</reviewer>
        </rule>
        <rule>
            <name>Insecure Method Call: eval|setTimeout|setInterval</name>
            <regex>\b(eval|setTimeout|setInterval)\(.+\)</regex>
            <rule_desc>Detects the usage of the `eval`, `setTimeout`, and `setInterval` functions.</rule_desc>
            <vuln_desc>This rule matches instances where the `eval`, `setTimeout`, or `setInterval` functions are used. These functions can introduce security vulnerabilities if not used carefully, as they can execute arbitrary code and lead to code injection or unintended consequences.</vuln_desc>
            <developer>Developers should avoid using the `eval`, `setTimeout`, and `setInterval` functions whenever possible. If their usage is necessary, developers should carefully validate and sanitize any input used within these functions to prevent code injection vulnerabilities.</developer>
            <reviewer>Reviewers should verify whether the code uses the `eval`, `setTimeout`, or `setInterval` functions. They should assess if the usage is justified and if proper input validation and sanitization techniques are implemented to prevent code injection vulnerabilities.</reviewer>
        </rule>
    </category>
    
    <category name="Cryptographic Issues">
        <rule>
            <name>Weak Cryptography</name>
            <regex>(CryptoJS\.DES\.encrypt|CryptoJS\.AES\.encrypt|MD5|SHA-1|RC4)\(.+\)</regex>
            <rule_desc>Detects the usage of weak cryptographic functions.</rule_desc>
            <vuln_desc>This rule matches instances where weak cryptographic functions, such as `CryptoJS.DES.encrypt`, `CryptoJS.AES.encrypt`, `MD5`, `SHA-1`, or `RC4`, are used. These functions are considered weak and can lead to security vulnerabilities in cryptographic operations.</vuln_desc>
            <developer>Developers should use stronger and more secure cryptographic functions and algorithms, such as AES-256 or SHA-256, for encryption and hashing operations. They should also follow best practices for key management and encryption protocols.</developer>
            <reviewer>Reviewers should verify if weak cryptographic functions are used in the code. They should assess if the code uses secure cryptographic algorithms and if best practices for encryption and hashing are followed.</reviewer>
        </rule>
        <rule>
            <name>Weak Random Number Generation</name>
            <regex>(Math\.random|crypto\.getRandomValues)\(.*\)</regex>
            <rule_desc>Detects the usage of weak random number generation.</rule_desc>
            <vuln_desc>This rule matches instances where weak random number generation functions, such as `Math.random()` or `crypto.getRandomValues()`, are used. Weak random number generation can lead to predictable values, compromising the security of cryptographic operations or session tokens.</vuln_desc>
            <developer>Developers should use strong and cryptographically secure random number generation functions, such as `crypto.getRandomValues()`, for any security-critical operations. They should avoid using `Math.random()` for generating random values that require high entropy.</developer>
            <reviewer>Reviewers should verify if weak random number generation functions, such as `Math.random()`, are used. They should assess if the code relies on secure random number generation functions for cryptographic operations or generating unpredictable values.</reviewer>
        </rule>
    </category>
    
    <category name="Information Disclosure">
        <rule>
            <name>Routes</name>
            <regex>(?i)route:\s+'.*(\s?)</regex>
            <rule_desc>Detects the presence of hardcoded routes in JavaScript code, which may expose sensitive information or introduce security risks.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the presence of hardcoded routes in the JavaScript code. Hardcoded routes may expose sensitive information, such as internal URLs, API endpoints, or authentication routes, to potential attackers. Hardcoded routes can also lead to security vulnerabilities, such as insufficient access control, information disclosure, or bypassing security mechanisms.</vuln_desc>
            <developer>Developers should avoid hardcoding routes in JavaScript code and instead consider using configuration files or dynamic route handling mechanisms. Hardcoding routes can introduce security risks and make the codebase less maintainable. By implementing dynamic routing solutions, developers can improve flexibility, allow for easier configuration changes, and minimize the exposure of sensitive information.</developer>
            <reviewer>Reviewers should verify whether the code contains hardcoded routes and assess the potential security implications. They should ensure that sensitive information, such as internal URLs, API endpoints, or authentication routes, is not exposed through hardcoded routes. Reviewers should also check if the code implements appropriate access control measures and adheres to secure coding practices, such as using configuration files or dynamic routing mechanisms.</reviewer>
        </rule>
    </category>
    
    <category name="Insecure/Weak Mitigations">
        <rule>
            <name>Weak Mitigation: Using disable|bypass|ignore|suppress|unsafe</name>
            <regex>\b(disable|bypass|ignore|suppress|unsafe)\b</regex>
            <rule_desc>Detects weak or inadequate security mitigations.</rule_desc>
            <vuln_desc>This rule matches instances where weak or inadequate security mitigations (such as disable, bypass, ignore, suppress, or unsafe) are used. Weak mitigations can lead to security vulnerabilities or provide a false sense of security, leaving the application exposed to attacks.</vuln_desc>
            <developer>Developers should avoid using weak or inadequate security mitigations as they can create vulnerabilities in the application. They should implement strong and effective security measures that follow established best practices and standards.</developer>
            <reviewer>Reviewers should identify weak or inadequate security mitigations in the code and recommend implementing stronger security measures. They should assess if the application applies appropriate security controls and avoids relying on weak mitigations that may be easily bypassed by attackers.</reviewer>
        </rule>
    </category>

    <category name="Database Queries">
        <rule>
            <name>SQL Query: SELECT Statements with WHERE or ORDER BY</name>
            <regex><![CDATA[(?i)\bSELECT\s+?\*?\s+?FROM\s+[^\s]+\s+(WHERE|ORDER BY)\b.*]]></regex>
            <rule_desc>Detects SELECT statements with WHERE or ORDER BY clauses in SQL queries, which may be vulnerable to SQL injection if user input is not handled securely in JavaScript environments.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the use of potentially vulnerable SELECT statements with WHERE or ORDER BY clauses. Improper handling of user input in these clauses can lead to SQL injection, allowing attackers to manipulate query behavior and gain unauthorized access to data.</vuln_desc>
            <developer>Developers should validate and implement secure alternatives, such as using parameterized queries or query bindings provided by JavaScript libraries like `mysql`, `pg`, or ORMs such as Sequelize to avoid SQL injection risks.</developer>
            <reviewer>Reviewers should check if parameterized queries or query bindings are used with SELECT statements containing WHERE or ORDER BY clauses in JavaScript applications to ensure secure handling of user input.</reviewer>
        </rule>

        <rule>
            <name>SQL Query: Unrestricted SELECT *</name>
            <regex><![CDATA[\bSELECT\s+\*\s+FROM\b]]></regex>
            <rule_desc>Detects "SELECT * FROM" in SQL queries, which can expose unnecessary or sensitive data in JavaScript applications.</rule_desc>
            <vuln_desc>If this rule matches, it suggests that the query retrieves more data than necessary, potentially exposing sensitive information and increasing the attack surface.</vuln_desc>
            <developer>Developers should validate and specify only necessary columns in SQL queries rather than using "SELECT *" to prevent unnecessary data exposure. This is especially important when working with libraries like `mysql` or `pg` in Node.js.</developer>
            <reviewer>Reviewers should verify that SQL queries in JavaScript applications select only the required columns to minimize data exposure risks.</reviewer>
        </rule>

        <rule>
            <name>SQL Query: Non-parameterized INSERT Statements</name>
            <regex><![CDATA[(?i)\bINSERT\s+INTO\s+[^\s]+\s+\(.*=.*\$.*\)]]></regex>
            <rule_desc>Detects non-parameterized INSERT statements that may include user input directly, leading to SQL injection vulnerabilities in JavaScript environments.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potentially vulnerable INSERT statement that could allow SQL injection if user input is included without proper handling.</vuln_desc>
            <developer>Developers should use parameterized queries or prepared statements in INSERT operations to prevent SQL injection attacks when using JavaScript libraries like `mysql`, `pg`, or ORMs such as Sequelize.</developer>
            <reviewer>Reviewers should inspect any INSERT statements to confirm secure parameterization in JavaScript applications and ensure that user input is handled safely to minimize injection risks.</reviewer>
        </rule>

        <rule>
            <name>Deprecated SQL Functions</name>
            <regex><![CDATA[(?i)\b(mysql_query|pg_query|sqlite_query|db.query|db.execute|knex.raw)\s*\(\s*['\"]?SELECT|INSERT|UPDATE|DELETE\s+.+\s*['\"]?\s*\.\s*\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)]]></regex>
            <rule_desc>Detects usage of deprecated or insecure SQL functions and dynamic SQL queries that may lead to security vulnerabilities in JavaScript applications.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the usage of potentially insecure SQL functions or libraries that may be vulnerable to SQL injection or other security issues if used without proper configurations or parameterization.</vuln_desc>
            <developer>Developers should avoid using deprecated SQL functions or dynamic query building, and instead use secure alternatives like prepared statements or parameterized queries available in Node.js libraries (`mysql`, `pg`, Sequelize).</developer>
            <reviewer>Reviewers should check for deprecated SQL functions or dynamic SQL building with user input, ensuring secure alternatives are implemented and that input validation and query parameterization practices are followed in JavaScript applications.</reviewer>
        </rule>
    </category>

    <category name="Deprecated Functions">
        <rule>
            <name>Deprecated JS Function: escape|unescape|eval</name>
            <regex>\b(escape|unescape|eval)\b</regex>
            <rule_desc>Detects usage of deprecated JavaScript functions.</rule_desc>
            <vuln_desc>This rule matches instances where deprecated JavaScript functions (such as escape, unescape, or eval) are used. Deprecated functions may have security vulnerabilities or compatibility issues and should be replaced with modern, safer alternatives.</vuln_desc>
            <developer>Developers should avoid using deprecated JavaScript functions as they may introduce security vulnerabilities. They should update their code to use modern alternatives and follow best practices to ensure the security and compatibility of their applications.</developer>
            <reviewer>Reviewers should check for the usage of deprecated JavaScript functions and recommend replacing them with safer alternatives. They should assess if the codebase follows best practices and avoids deprecated functions that may pose security risks.</reviewer>
        </rule>
    </category>
    
    <category name="MISC Checks">
        <rule>
            <name>Insecure Direct Object References (IDOR)</name>
            <regex>(req\.params|req\.query|req\.body)[\s\S]*?(\[|\.)[\s\S]*?</regex>
            <rule_desc>Detects potential Insecure Direct Object References (IDOR).</rule_desc>
            <vuln_desc>This rule matches potential Insecure Direct Object References (IDOR) vulnerabilities in the code. IDOR occurs when user-supplied input is used directly to access internal resources or sensitive objects without proper authorization or validation. Attackers can manipulate the input to access unauthorized resources, view sensitive data, or perform actions they are not allowed to.</vuln_desc>
            <developer>Developers should implement proper authorization and access control mechanisms to prevent IDOR vulnerabilities. User input used to access resources should be validated, sanitized, and authorized based on the user's privileges. Additionally, developers should use indirect references or randomized identifiers to obfuscate direct object references.</developer>
            <reviewer>Reviewers should verify whether the code implements proper authorization and access control mechanisms to prevent IDOR vulnerabilities. They should check if user input used to access resources is properly validated, sanitized, and authorized. Reviewers should assess the effectiveness of the implemented measures in mitigating IDOR risks.</reviewer>
        </rule>
        <rule>
            <name>Server-Side Request Forgery (SSRF)</name>
            <regex>XMLHttpRequest\.open\(|fetch\(|axios\.get\(|http\.request\(|https\.request\(|http\.get\(|https\.get\(|http\.post\(|https\.post\(|http\.put\(|https\.put\(|http\.delete\(|https\.delete\(|\$.ajax\({\s*url:\s*['"].+['"]</regex>
            <rule_desc>Detects potential server-side request forgery (SSRF) vulnerabilities.</rule_desc>
            <vuln_desc>This rule matches instances where XMLHttpRequest, fetch, axios, http.request, https.request, http.get, https.get, http.post, https.post, http.put, https.put, http.delete, https.delete, or $.ajax functions are used with potentially untrusted URLs. Improper usage of these functions can lead to SSRF vulnerabilities, allowing attackers to make unauthorized requests to internal resources.</vuln_desc>
            <developer>Developers should implement proper input validation and sanitization when using XMLHttpRequest, fetch, axios, http.request, https.request, http.get, https.get, http.post, https.post, http.put, https.put, http.delete, https.delete, or $.ajax functions. They should validate and restrict the URLs to trusted sources to prevent SSRF attacks.</developer>
            <reviewer>Reviewers should verify if XMLHttpRequest, fetch, axios, http.request, https.request, http.get, https.get, http.post, https.post, http.put, https.put, http.delete, https.delete, or $.ajax functions are used with potentially untrusted URLs. They should assess if proper input validation and URL restriction mechanisms are implemented to mitigate SSRF vulnerabilities.</reviewer>
        </rule>
        <rule>
            <name>Prototype Pollution</name>
            <regex>(\b__proto__\b|Object\.prototype\.(?!hasOwnProperty)[a-zA-Z]+\s?=)</regex>
            <rule_desc>Detects potential prototype pollution vulnerabilities.</rule_desc>
            <vuln_desc>This rule matches instances where the `__proto__` property or assignment to properties of `Object.prototype` (excluding `hasOwnProperty`) is performed. These actions can lead to prototype pollution vulnerabilities, allowing attackers to modify the behavior of objects and potentially compromise the application's security.</vuln_desc>
            <developer>Developers should avoid using or modifying the `__proto__` property directly, and they should exercise caution when extending or modifying properties of `Object.prototype`. They should use safer alternatives, such as `Object.create()` or creating new objects with specific prototypes.</developer>
            <reviewer>Reviewers should verify if the code directly uses or modifies the `__proto__` property or assigns values to properties of `Object.prototype` (excluding `hasOwnProperty`). They should assess if proper precautions are taken to prevent prototype pollution vulnerabilities.</reviewer>
        </rule>
        <rule>
            <name>Missing Cookie Security Flags</name>
            <regex>(httpOnly(\s)*:(\s)*true|httpOnly)| (secure(\s)*:(\s)*true|secure)| (SameSite(\s)*=(\s)*(Lax|Strict))| (SameSite(\s)*=(\s)*(None|lax))| (Domain(\s)*=(\s)*.*[;\s])| (Domain(\s)*=(\s)*(localhost|\.local))</regex>
            <rule_desc>Detects the absence of important security flags in a cookie, such as 'httpOnly', 'secure', 'SameSite', and 'Domain' attributes.</rule_desc>
            <vuln_desc>If this rule matches, it indicates that one or more security flags are missing in a cookie. The absence of these flags can lead to security vulnerabilities, including cross-site scripting (XSS) attacks and information leakage.</vuln_desc>
            <developer>Developers should ensure that cookies containing sensitive information have the necessary security flags set. This includes enabling the 'httpOnly' attribute, setting the 'secure' attribute for secure connections, and specifying appropriate values for the 'SameSite' and 'Domain' attributes. These measures help protect against various security risks, such as XSS attacks and cookie tampering.</developer>
            <reviewer>Reviewers should verify whether the code correctly applies the necessary security flags to cookies. They should check for the presence of 'httpOnly', 'secure', 'SameSite', and 'Domain' attributes and confirm that they are set appropriately. Reviewers should assess the impact of missing security flags on the overall security posture of the application and provide recommendations for remediation.</reviewer>
        </rule>
    </category>
</root>

