<root>
    <rule>
        <name>Handlebars Unescaped String</name>
        <regex>handlebars\.SafeString</regex>
        <description>Detects unescaped Handlebars strings in code.</description>
        <rule_desc>Detects instances of unescaped Handlebars strings in the code, which can indicate a potential security vulnerability.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of unescaped Handlebars strings in the code. Unescaped strings can lead to cross-site scripting (XSS) vulnerabilities if user input is not properly escaped or sanitized before rendering.</vuln_desc>
        <developer>Developers should ensure that user input used with Handlebars strings is properly sanitized or escaped to prevent XSS attacks. Handlebars provides built-in mechanisms for escaping user input. Developers should follow these secure coding practices and sanitize or escape user-generated content before using it in Handlebars strings.</developer>
        <reviewer>Reviewers should verify that proper input sanitization techniques are applied when using Handlebars strings. They should ensure that developers use Handlebars' built-in escaping mechanisms or equivalent custom sanitization methods to mitigate the risk of XSS vulnerabilities. Reviewers should also assess the implementation of output encoding and confirm that user input is properly sanitized before rendering it in the application.</reviewer>
    </rule>
    <rule>
        <name>Missing 'httpOnly' in Cookie</name>
        <regex>httpOnly(\s)*:(\s)*true|httpOnly</regex>
        <description>Detailed description goes here</description>
    </rule>
    <rule>
        <name>Remote OS Command Execution - (child_process.exec())</name>
        <regex>require( )*(\()( *)('|")child_process('|")( *)(\))</regex>
        <description>TBD</description>
    </rule>
        <rule>
        <name>Routes</name>
        <regex>(^|\s)(?i)route: \'.*(\s?)</regex>
        <description>TBD</description>
    </rule>
</root>

