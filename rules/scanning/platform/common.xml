<root>
    <category name="Authentication or Authorization Functionalities">
        <rule>
            <name>Authentication Modules</name>
            <regex>(?i)\b(Login|authenticate|authenticating|authenticated|oauth|jwt)\b</regex>
            <rule_desc>Detects common terms used in authentication functionalities, such as 'Login', 'authenticate', 'OAuth', and 'JWT', when used in likely function names or module references.</rule_desc>
            <vuln_desc>This rule matches on common function or module names associated with authentication. If not properly secured, these modules may expose vulnerabilities in user authentication, allowing unauthorized access.</vuln_desc>
            <developer>Ensure authentication processes use secure configurations, apply best practices, and avoid using weak or generic names that could be predictable.</developer>
            <reviewer>Verify that authentication mechanisms are implemented securely, with protections like parameterized inputs, encryption, and secure session management.</reviewer>
        </rule>

        <rule>
            <name>Authorization Modules</name>
            <regex>(?i)\b(authoriz(e|ing|ed)|access_control|rbac|abac|acl)\b</regex>
            <rule_desc>Detects terms used in authorization and access control functionalities, such as 'authorize', 'access_control', 'RBAC', and 'ABAC', in probable function names or modules.</rule_desc>
            <vuln_desc>This rule matches likely references to authorization or access control functionality. Improper implementation can allow unauthorized access to sensitive resources, compromising security.</vuln_desc>
            <developer>Ensure secure implementation of authorization checks, role-based access control, or attribute-based access control, and avoid predictable naming for sensitive modules.</developer>
            <reviewer>Verify that authorization checks are properly enforced and configured to secure sensitive data and resources.</reviewer>
        </rule>
    </category>
    
    <category name="Privileged User or Management Functionalities">
        <rule>
            <name>Admin Modules/Section</name>
            <regex>(?i)\b(admin_func|admin_page|admin_login|administrator|admin_portal|admin_module|admin_interface)\b</regex>
            <rule_desc>Detects common terms for administrative functions, modules, or login pages, specifically focusing on terms that indicate specific functionality rather than general mentions.</rule_desc>
            <vuln_desc>This rule matches terms commonly associated with administrative functionalities or access points. If inadequately secured, these areas could expose critical functions to unauthorized access.</vuln_desc>
            <developer>Use descriptive, non-generic names for admin-related functions, secure with strong authentication and access controls, and consider avoiding direct exposure of administrative URLs or modules.</developer>
            <reviewer>Verify that all admin functionalities are secured and access-controlled to prevent unauthorized access and ensure secure implementation.</reviewer>
        </rule>
    </category>
    
    <category name="Commonly Targeted Functionalities">
        <rule>
            <name>File Upload Functionality</name>
            <regex>(?i)(file\s*upload|file\s*input|upload\s*file|upload[_-]handler|upload[_-]service|upload[_-]controller|upload[_-]module)(?!.*\b(secure|protected|restricted)\b)</regex>
            <!--<regex>(?i)\b(file\s*upload|upload[_-]file|upload[_-]handler|upload[_-]service|file\s*(uploader|uploaderService|post|transfer|write|put))\b(?!.*\b(secure|protected|restricted)\b)</regex>
            -->
            <rule_desc>Detects likely implementations of file upload functionality by matching common terms associated with file upload services or modules.</rule_desc>
            <vuln_desc>If this rule matches, it indicates potential file upload functionality, which, if improperly secured, could allow unauthorized or malicious file uploads. This can lead to risks such as arbitrary code execution or data leakage.</vuln_desc>
            <developer>Ensure file upload functionality is implemented securely with validation of file types, size limits, and access controls. Use established libraries or frameworks with built-in security features for file uploads to minimize risks.</developer>
            <reviewer>Verify that secure file upload practices are followed, including file type validation, size restrictions, and appropriate access controls to prevent unauthorized file uploads.</reviewer>
        </rule>
    </category>

    <category name="Hardcoded Secrets or Sensitive Info">
        <rule>
            <name>Password</name>
            <regex>(?i)(Password|password|pwd|passwd)</regex>
                <exclude>\b(?:SELECT|UPDATE|INSERT|FROM)\b</exclude>
            <rule_desc>Detects potential password-related strings in the code.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential presence of password-related strings in the code, which can lead to security risks if not handled properly.</vuln_desc>
            <developer>Developers should follow best practices for password handling, including strong encryption, salted hashing, and enforcing secure password policies.</developer>
            <reviewer>Reviewers should assess the password handling mechanisms and verify if proper security measures are in place.</reviewer>
        </rule>
        <rule>
            <name>Server-side Secrets Handling</name>
            <regex>\b(apikey|api[-_]?key|secret|token|access_token|auth_token|client_secret|private_key|encryption_key|db_password|security_key|session_key|service_account_key|passphrase|cert_key|app_secret|api_secret|jwt_secret)\s*=</regex>
            <rule_desc>Detects potential server-side secrets handling vulnerabilities in the code.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential presence of server-side secrets (e.g., hardcoded secrets, assignments) in the code, which can lead to security risks if not handled properly.</vuln_desc>
            <developer>Developers should avoid storing secrets directly in the code and instead use secure methods such as environment variables or key management systems.</developer>
            <reviewer>Reviewers should assess the handling of server-side secrets and verify if proper security measures are in place.</reviewer>
        </rule>
        <rule>
            <name>Credit Card</name>
            <regex>((\D(6011|5[1-5]\d{2}|4\d{3}|3\d{3})\d{11,12}\D)|(^(6011|5[1-5]\d{2}|4\d{3}|3\d{3})\d{11,12}\D))</regex>
            <rule_desc>Detects potential credit card numbers in the code.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential presence of credit card numbers in the code, which can lead to security risks if not handled properly.</vuln_desc>
            <developer>Developers should follow industry best practices for handling credit card information, including encryption, compliance with PCI-DSS standards, and avoiding unnecessary storage of sensitive data.</developer>
            <reviewer>Reviewers should assess the handling of credit card information and verify if proper security measures are in place.</reviewer>
        </rule>
        <rule>
            <name>Detect RSA Private Keys</name>
            <regex>BEGIN RSA PRIVATE KEY</regex>
            <rule_desc>Detects the presence of RSA private keys.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential presence of RSA private keys, which are sensitive cryptographic assets and should be securely managed and protected.</vuln_desc>
            <developer>Developers should ensure the proper storage, protection, and secure handling of RSA private keys, following industry best practices and cryptographic standards.</developer>
            <reviewer>Reviewers should verify the secure handling of RSA private keys and assess if adequate measures are in place to safeguard their confidentiality and integrity.</reviewer>
        </rule>
    </category>
    <category name="Information Disclosure">
        <rule>
            <name>Information Disclosure: Stack Trace or Error Messages</name>
            <regex>(?i)Stacktrace</regex>
            <rule_desc>Detects potential information disclosure due to stack traces or error messages.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential presence of stack traces or error messages in the code, which can provide valuable information to attackers and facilitate targeted attacks.</vuln_desc>
            <developer>Developers should ensure that error handling mechanisms are properly implemented, and sensitive information is not exposed in error responses.</developer>
            <reviewer>Reviewers should check for the presence of sensitive information in error responses and verify the implementation of proper error handling.</reviewer>
        </rule>
        <rule>
            <name>Sensitive Debug Information</name>
            <regex>(?i)\.debug\s*=\s*True|\$debug\s*=\s*true|DEBUG\s*=\s*True|IsDebuggingEnabled\s*=\s*true</regex>
            <rule_desc>Detects the presence of sensitive debug information in application settings.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to the presence of sensitive debug information in production settings. Enabling debugging in production can expose sensitive information and pose security risks. Developers should ensure that debugging is disabled in production environments.</vuln_desc>
            <developer>Developers should disable debugging features or set debug flags to false in application settings for production environments to prevent the exposure of sensitive debug information.</developer>
            <reviewer>Reviewers should check for debug-related configurations in application settings and ensure that they are disabled or set to false in production environments to protect sensitive information.</reviewer>
        </rule>
    </category>
    <category name="Dynamic SQL Queries">
        <!-- Unsafe string concatenation in SQL queries -->
        <rule>
            <name>Insecure SQL Query: Unsafe String Concatenation</name>
            <regex>(?i)SELECT\s+\*?\s+FROM\s+([^\s;]+)\s+WHERE\s+([^\s;]+)\s*=\s*'\s*\+\s*([^;]+)\s*\+\s*'\s*;</regex>
            <rule_desc>Detects SQL queries with unsafe string concatenation of user input.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential vulnerability of SQL injection. Attackers can manipulate the concatenated string to alter the query's logic or inject malicious SQL code.</vuln_desc>
            <developer>Developers should use parameterized queries or prepared statements to prevent SQL injection attacks. Avoid concatenating user input directly into SQL queries.</developer>
            <reviewer>Reviewers should verify that SQL queries use parameterized queries or prepared statements to handle user input securely. They should flag any occurrences of unsafe string concatenation in SQL queries for further review.</reviewer>
        </rule>
        <rule>
            <name>SQL Query: SELECT Statement with ORDER BY Clause</name>
            <regex>(SELECT).*(ORDER BY).*</regex>
            <rule_desc>Detects the usage of SELECT statements with ORDER BY clauses.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential use of SELECT statements with ORDER BY clauses, which can introduce the risk of SQL injection or unintended data exposure if not properly handled.</vuln_desc>
            <developer>Developers should implement proper input validation and parameterization techniques to mitigate the risk of SQL injection when using SELECT statements with ORDER BY clauses.</developer>
            <reviewer>Reviewers should verify the implementation of secure coding practices and assess if additional security measures are in place to prevent SQL injection.</reviewer>
        </rule>
        <rule>
            <name>SQL Query: SELECT Statement with ORDER BY and @InputName</name>
            <regex>(SELECT).*(ORDER BY).*\s(\@[a-zA-Z]+)</regex>
            <rule_desc>Detects the usage of SELECT statements with ORDER BY clauses and a specified input name.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential use of SELECT statements with ORDER BY clauses and a specified input name, which can introduce the risk of SQL injection or unintended data exposure if not properly handled.</vuln_desc>
            <developer>Developers should implement proper input validation and parameterization techniques to mitigate the risk of SQL injection when using SELECT statements with ORDER BY clauses and user-provided input names.</developer>
            <reviewer>Reviewers should verify the implementation of secure coding practices and assess if additional security measures are in place to prevent SQL injection.</reviewer>
        </rule>
        <rule>
            <name>SQL Query: Using INSERT, UPDATE, DELETE, or DROP</name>
            <regex>(INSERT|UPDATE|DELETE|DROP).*\$\{[a-zA-Z0-9_]+\}.*</regex>
            <rule_desc>This pattern would match queries containing variables in a format like ${variableName}, indicating the usage of dynamic SQL queries involving INSERT, UPDATE, DELETE, or DROP commands.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential use of dynamic SQL queries with INSERT, UPDATE, DELETE, or DROP commands, which can introduce the risk of SQL injection or unintended modifications to the database if not properly handled.</vuln_desc>
            <developer>Developers should check for the use of dynamic queries with these commands and verify proper input handling. If detected, implement proper input validation, parameterization techniques, and use prepared statements to mitigate the risk of SQL injection or unauthorized database changes.</developer>
            <reviewer>Reviewers should check for the presence of dynamic queries with INSERT, UPDATE, DELETE, or DROP commands and assess proper input handling and parameterization. They should verify that appropriate measures are in place to prevent SQL injection or unauthorized changes, including input validation and restrictions on executing harmful commands.</reviewer>
        </rule>
    </category>
    <category name="Trust-boundary Validation or 3rd-Party Interactions">
        <rule>
            <name>IPv4 / IPv6 Address</name>
            <regex>\b(?:\b(?:[1-9]|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(?:\d{1,3}\.){2}\d{1,3}\b|\b(?:(?:(?:[0-9A-Fa-f]{1,4}):){6}(?:[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|(?:2[0-4]|1\d|[1-9])?\d)(?:\.(?:25[0-5]|(?:2[0-4]|1\d|[1-9])?\d)){3})))\b)</regex>
                <exclude>(?i)\b\w*(?:version|release|dotnet|oid|urn|mozilla|useragent)\w*\b</exclude>
            <rule_desc>Detects potential IPv4 or IPv6 addresses in the code.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential presence of IP addresses in the code, which can lead to security risks if not handled properly.</vuln_desc>
            <developer>Developers should carefully validate and sanitize input related to IP addresses to prevent security vulnerabilities such as IP spoofing or injection attacks.</developer>
            <reviewer>Reviewers should check for appropriate input handling and assess the implementation of input validation and sanitization techniques for IP addresses.</reviewer>
        </rule>

        <rule>
            <name>Trusted Or Untrusted URLs</name>
            <regex>(?i)\bhttps?://[^\s]+</regex>
                <exclude>(?i).*DOCTYPE\s.*</exclude>
            <rule_desc>Detects the presence of URLs in the application that may pose security risks or indicate potential trust issues with third-party URLs.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the presence of URLs starting with http:// or https://, which could potentially pose security risks if not properly handled or validated. These URLs might involve data exfiltration or raise concerns about trusting third-party resources without thorough validation. Developers and reviewers should investigate these URLs to ensure their purpose, legitimacy, and adherence to security practices.</vuln_desc>
            <developer>Developers should list and carefully review all URLs used in the application. They should implement proper URL validation and sanitization techniques to ensure the security and integrity of the application when dealing with user-provided or third-party URLs. It is important to prevent any unintentional exposure of sensitive information and perform thorough taint validation on third-party URLs to mitigate trust-related security risks.</developer>
            <reviewer>Reviewers should verify the implementation of secure URL handling practices and assess if additional security measures are necessary. They should thoroughly investigate the presence of these URLs, determine their purpose, and ensure they undergo appropriate taint validation. Reviewers should pay special attention to URLs associated with data exfiltration concerns and assess the trustworthiness of third-party URLs to mitigate potential security risks.</reviewer>
        </rule>
        
        <rule>
            <name>Unvalidated Redirects and Forwards</name>
            <regex>.*\b(redirect|forward)\b.*</regex>
            <rule_desc>Detects potential unvalidated redirect and forward vulnerabilities.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the presence of code patterns that may indicate vulnerabilities in unvalidated redirects and forwards, which can be exploited by attackers to redirect users to malicious websites or perform phishing attacks.</vuln_desc>
            <developer>Developers should validate and sanitize all user-supplied input used in redirect and forward operations. They should also ensure that redirects and forwards are performed only to trusted and authorized destinations.</developer>
            <reviewer>Reviewers should review the code for potential unvalidated redirect and forward vulnerabilities and verify if proper input validation and destination checks are implemented.</reviewer>
        </rule>
    </category>
    
    <category name="APIs and Endpoints">
        <rule>
            <name>API Endpoint Detection</name>
            <regex>(["'])(\/\w+\/{[^{}]+})\1</regex>
            <description>Detects potential API endpoints in source code.</description>
            <rule_desc>Detects the usage of potential API endpoints in source code files, which may require special handling and validation.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential presence of API endpoints in the source code. API endpoints often involve data extraction, processing, and may expose sensitive information if not handled securely. Developers should be aware of the specific requirements for handling API endpoints and implement appropriate validation, authentication, and authorization mechanisms.</vuln_desc>
            <developer>Developers should carefully review and validate the identified API endpoints. They should follow best practices for handling API endpoints, including input validation, authentication, authorization, and proper data handling. Additionally, developers should consider implementing rate limiting, input/output validation, and strong security controls to protect the API endpoints.</developer>
            <reviewer>Reviewers should check for the presence of API endpoints in the source code. They should verify if developers have implemented appropriate security measures for handling API endpoints, such as input validation, authentication, authorization, rate limiting, and secure data handling. Reviewers should also assess the sensitivity of the data handled by the API endpoints and confirm the presence of relevant security controls.</reviewer>
        </rule>
    </category>
    
    <category name="Code Quality and Documentation">
        <rule>
            <name>TODO Comments</name>
            <regex>(?i)TODO(\s?)</regex>
            <rule_desc>Detects TODO comments in the code.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the presence of TODO comments, which might indicate unfinished or pending tasks that could lead to security vulnerabilities or incomplete code functionality.</vuln_desc>
            <developer>Developers should regularly review and address TODO comments to ensure the completion of tasks, proper code functionality, and security of the application.</developer>
            <reviewer>Reviewers should check for the presence of TODO comments and verify if they have been properly addressed during code reviews and inspections.</reviewer>
        </rule>
        <rule>
            <name>Monkey Patched Code</name>
            <regex>(?i)(monkey_patch|patched_code|custom_patch)[\s\S]*?\(\s*\*?\w+\s*\*?\)</regex>
            <rule_desc>Detects the presence of monkey patched code in a project.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the presence of monkey patched code in the project. While monkey patches themselves may not inherently contain security issues, they introduce potential maintenance challenges and risks. Ensure that these patches are well-documented, periodically reviewed for necessity, and that they do not introduce security vulnerabilities or regressions.</vuln_desc>
            <developer>Developers should carefully review and document any monkey patched code in the project. Ensure that the patches are correctly applied and do not introduce compatibility issues or security vulnerabilities. Consider alternatives to monkey patching when possible to maintain code stability and security.</developer>
            <reviewer>Reviewers should verify the presence of monkey patched code in the project and assess its impact on code stability and security. Particular attention should be paid to patches affecting security-critical components like authentication, authorization, or database queries.</reviewer>
        </rule>
    </category>
    <category name="Cryptographic Issues">
        <rule>
            <name>Insecure Cryptographic Algorithm</name>
            <regex>(?i)\b(MD2|MD4|MD5|SHA1|SHA-1|DES|RC2|RC4|RC5|RSA)\b</regex>
            <rule_desc>Detects the usage of insecure cryptographic algorithms in Java code.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential vulnerability of using insecure cryptographic algorithms. Insecure algorithms such as MD5, SHA-1, or weak encryption algorithms can be exploited by attackers to bypass security measures or recover sensitive information.</vuln_desc>
            <developer>Developers should use secure cryptographic algorithms, such as SHA-256 or SHA-3 for hashing and AES for encryption. They should avoid using deprecated or weak algorithms that have known vulnerabilities.</developer>
            <reviewer>Reviewers should verify that secure cryptographic algorithms are used to mitigate the risk of cryptographic vulnerabilities. They should assess if deprecated or weak algorithms are used and recommend replacing them with stronger alternatives.</reviewer>
        </rule>
    </category>

    <category name="Malicious Code or Backdoor Detection">
        <rule>
            <name>Backdoor Entry and Bypass Detection</name>
            <regex>(?i)\b(backdoor|bypass|sneaky|exploit|unauthorized_access|unauthorized_entry|hidden_entry|stealthy_entry|secret_entry)\b</regex>
            <rule_desc>Detects the presence of keywords commonly associated with backdoor entries or methods used to bypass security restrictions in code.</rule_desc>
            <vuln_desc>If this rule matches, it suggests potential vulnerabilities associated with backdoor entries or circumvention techniques. Such vulnerabilities can lead to unauthorized access, privilege escalation, and overall security breaches.</vuln_desc>
            <developer>Developers should implement robust access controls, perform regular input validation, and enforce least privilege principles to mitigate risks of backdoor entries or unauthorized access attempts. Conducting frequent security assessments and code reviews is crucial to identify and remediate vulnerabilities.</developer>
            <reviewer>Reviewers should investigate any matches for backdoor-related terms, ensuring that no actual backdoor entries or bypass techniques exist in the code. They must verify that proper security measures are implemented to prevent unauthorized access and assess the overall security posture of the application.</reviewer>
        </rule>
    </category>

    <category name="Common Mitigations">
        <rule>
            <name>CAPTCHA Implementation</name>
            <regex>(?i)(captcha|recaptcha)(\s+(?!secure|strong|reliable|safe)\w+)*</regex>
            <rule_desc>Detects the presence of CAPTCHA implementations that are potentially insecure or weak.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential presence of CAPTCHA implementations that may be insecure or weak, potentially allowing automated or malicious activities to bypass the CAPTCHA protection.</vuln_desc>
            <developer>Developers should ensure that CAPTCHA implementations are secure, using reliable and robust techniques to effectively prevent automated or malicious activities. It is recommended to use well-established CAPTCHA solutions and regularly update them to stay ahead of evolving threats.</developer>
            <reviewer>Reviewers should assess the strength and security of the CAPTCHA implementation to ensure it provides adequate protection against automated or malicious activities.</reviewer>
        </rule>
        <rule>
            <name>Miscellaneous Webapp Mitigations: CSRF, XSS, SQL Injection</name>
            <regex>\\S*(CSRF|XSS|SQLi)\\S*(\\.|\\-\\>)(ToLower|ToUpper)\\s*\\</regex>
            <rule_desc>Detects standard mitigation techniques for CSRF, XSS, and SQL injection vulnerabilities.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential use of standard mitigation techniques for CSRF, XSS, and SQL injection, which may have limitations and can introduce security risks if not properly implemented.</vuln_desc>
            <developer>Developers should consider advanced and comprehensive mitigation strategies for CSRF, XSS, and SQL injection vulnerabilities, such as using specialized security libraries and frameworks.</developer>
            <reviewer>Reviewers should evaluate the effectiveness of the standard mitigation techniques and assess if additional measures are necessary for robust security.</reviewer>
        </rule>
    </category>
</root>