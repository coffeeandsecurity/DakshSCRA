<root>
    <rule>
        <name>Unsanitized Interpolation in Angular Templates</name>
        <regex>\{\{(.+?)\}\}</regex>
        <rule_desc>Detects instances of unsanitized interpolation in Angular templates.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of unsanitized interpolation in Angular templates. Unsanitized interpolation can lead to cross-site scripting (XSS) vulnerabilities if user input is not properly escaped or sanitized before rendering in the template.</vuln_desc>
        <developer>Developers should ensure that user input used in Angular templates is properly sanitized or escaped to prevent XSS attacks. Angular provides built-in sanitization mechanisms like the `DomSanitizer` to mitigate this risk. Always sanitize or escape user-generated content before rendering it in templates using Angular's built-in functions or custom sanitization methods.</developer>
        <reviewer>Reviewers should verify that proper input sanitization techniques are applied in Angular templates. They should ensure that developers use Angular's built-in sanitization mechanisms or equivalent custom sanitization methods to mitigate the risk of XSS vulnerabilities. Reviewers should also assess the implementation of output encoding and confirm that user input is properly sanitized before rendering it in Angular templates.</reviewer>
    </rule>
    <rule>
        <name>Insecure Direct Object References (IDOR)</name>
        <regex>\$http\.get\('\.{2}\/api\/[a-zA-Z0-9_]*'\)</regex>
        <rule_desc>Detects instances where Angular code directly references sensitive backend resources or object identifiers.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of insecure direct object references. Attackers can manipulate the identifiers or endpoints in the Angular code to access unauthorized resources or perform unauthorized actions.</vuln_desc>
        <developer>Developers should implement proper authorization checks on the server-side to prevent unauthorized access to sensitive resources. They should avoid directly exposing sensitive identifiers or backend endpoints in Angular code and instead use secure mechanisms to fetch and validate data from the server.</developer>
        <reviewer>Reviewers should ensure that appropriate authorization checks are implemented on the server-side and that sensitive resources are properly protected. They should verify that the Angular code does not directly expose sensitive identifiers or backend endpoints and that proper access controls and validation mechanisms are in place.</reviewer>
    </rule>
    <rule>
        <name>Cross-Site Scripting (XSS) in Angular Components</name>
        <regex>(innerHTML|textContent|ng-bind-html)="(.+?)"</regex>
        <rule_desc>Detects potential XSS vulnerabilities in Angular components where user input is rendered without proper escaping or sanitization.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of cross-site scripting (XSS) in Angular components. When user input is rendered without proper escaping or sanitization in these components, attackers can inject malicious scripts that will be executed in the context of the application, potentially leading to data theft, session hijacking, or other malicious activities.</vuln_desc>
        <developer>Developers should ensure that user input rendered in Angular components is properly sanitized or escaped using Angular's built-in sanitization mechanisms or equivalent custom methods. Proper input validation and output encoding should be applied to prevent XSS attacks. Developers should also follow secure coding practices, such as applying the principle of least privilege and validating user input on the server-side as well.</developer>
        <reviewer>Reviewers should verify that proper input sanitization techniques are applied in Angular components. They should ensure that developers use Angular's built-in sanitization mechanisms or equivalent custom sanitization methods to mitigate the risk of XSS vulnerabilities. Reviewers should also assess the implementation of output encoding and confirm that user input is properly sanitized before rendering it in Angular components.</reviewer>
    </rule>
    <rule>
        <name>Weak Input Validation in Angular Forms</name>
        <regex>\[(ngModel|formControl)]="(.+?)"</regex>
        <rule_desc>Detects instances where input validation in Angular forms is insufficient or weak.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of weak input validation in Angular forms. Inadequate input validation can allow users to submit malicious or unexpected input, leading to security vulnerabilities such as SQL injection, cross-site scripting (XSS), or command injection.</vuln_desc>
        <developer>Developers should implement strong input validation in Angular forms to ensure that only expected and properly formatted values are accepted. This can include using built-in Angular validators, creating custom validators, or applying regular expressions and input masks to enforce strict input requirements. Additionally, server-side validation should always be performed to validate and sanitize input before processing.</developer>
        <reviewer>Reviewers should verify that appropriate input validation techniques are implemented in Angular forms. They should ensure that developers use Angular's built-in validators, custom validators, or other validation mechanisms to enforce strong input validation. Reviewers should also assess the implementation of server-side validation to mitigate the risk of weak input validation vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Lack of Content Security Policy (CSP)</name>
        <regex>&lt;meta\s+http-equiv=["']Content-Security-Policy["']\s+content=["'](.+?)["']&gt;</regex>
        <rule_desc>Detects instances where Angular applications lack a Content Security Policy (CSP) configuration.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of a missing Content Security Policy (CSP) in the Angular application. Without a proper CSP, the application is more susceptible to attacks such as cross-site scripting (XSS), clickjacking, and data injection.</vuln_desc>
        <developer>Developers should implement a strong Content Security Policy (CSP) for the Angular application. The CSP should specify allowed sources for scripts, styles, images, and other resources, and should enforce strict policies to prevent unauthorized execution of scripts and protect against XSS attacks and other common web vulnerabilities.</developer>
        <reviewer>Reviewers should verify that a Content Security Policy (CSP) is properly configured for the Angular application. They should assess the defined policies and ensure that they effectively mitigate the risks associated with XSS attacks, clickjacking, and other common web vulnerabilities. Reviewers should also verify that the CSP is properly applied and enforced throughout the application.</reviewer>
    </rule>
    <rule>
        <name>Regular Expression Denial of Service (ReDoS) in Angular's <input type="url"></name>
        <regex>&lt;input type="url"&gt;</regex>
        <rule_desc>Detects usage of the vulnerable <input type="url"> element in Angular versions prior to 1.4.9, which can be exploited for Regular Expression Denial of Service (ReDoS).</rule_desc>
        <vuln_desc>If this rule matches, it indicates the usage of the vulnerable <input type="url"> element in Angular versions prior to 1.4.9. These versions contain an insecure regular expression in the input[url] functionality, which can be exploited with a carefully-crafted large input to cause catastrophic backtracking, leading to denial of service.</vuln_desc>
        <developer>Developers should ensure that they are using Angular versions 1.4.9 or above to mitigate this vulnerability. They should also consider alternative validation mechanisms or custom input handling to prevent potential Regular Expression Denial of Service (ReDoS) attacks. Regular expressions used for input validation should be carefully crafted to avoid catastrophic backtracking.</developer>
        <reviewer>Reviewers should verify that the vulnerable <input type="url"> element is not used in Angular versions prior to 1.4.9. They should ensure that developers have upgraded to a secure version of Angular and have implemented appropriate input validation mechanisms to mitigate the risk of Regular Expression Denial of Service (ReDoS) vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Regular Expression Denial of Service (ReDoS) in $resource service</name>
        <regex>\$resource\(.+?\)</regex>
        <rule_desc>Detects usage of the vulnerable $resource service in versions of the Angular package prior to 1.0.0, which can be exploited for Regular Expression Denial of Service (ReDoS).</rule_desc>
        <vuln_desc>If this rule matches, it indicates the usage of the vulnerable $resource service in versions of the Angular package prior to 1.0.0. These versions contain an insecure regular expression, which can be exploited with a carefully-crafted large input to cause catastrophic backtracking, resulting in denial of service.</vuln_desc>
        <developer>Developers should ensure that they are using Angular versions 1.0.0 or above to mitigate this vulnerability. They should update their Angular package to the latest secure version to avoid the usage of the vulnerable $resource service. Additionally, developers should consider alternative approaches or custom resource services that do not rely on insecure regular expressions.</developer>
        <reviewer>Reviewers should verify that the vulnerable $resource service is not used in versions of Angular prior to 1.0.0. They should ensure that developers have upgraded to a secure version of Angular and have implemented appropriate input validation mechanisms to prevent Regular Expression Denial of Service (ReDoS) vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Regular Expression Denial of Service (ReDoS) in angular.copy()</name>
        <regex>angular\.copy\(.+?\)</regex>
        <rule_desc>Detects usage of the vulnerable angular.copy() utility function in versions of the Angular package prior to 1.2.21, which can be exploited for Regular Expression Denial of Service (ReDoS).</rule_desc>
        <vuln_desc>If this rule matches, it indicates the usage of the vulnerable angular.copy() utility function in versions of the Angular package prior to 1.2.21. These versions contain an insecure regular expression, which can be exploited with a carefully-crafted large input to cause catastrophic backtracking, resulting in denial of service.</vuln_desc>
        <developer>Developers should ensure that they are using Angular versions 1.2.21 or above to mitigate this vulnerability. They should update their Angular package to the latest secure version to avoid the usage of the vulnerable angular.copy() function. Additionally, developers should consider alternative approaches or custom copy functions that do not rely on insecure regular expressions.</developer>
        <reviewer>Reviewers should verify that the vulnerable angular.copy() function is not used in versions of Angular prior to 1.2.21. They should ensure that developers have upgraded to a secure version of Angular and have implemented appropriate input validation mechanisms to prevent Regular Expression Denial of Service (ReDoS) vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Cross-Site Scripting (XSS) via insecure page caching in Internet Explorer</name>
        <regex>&lt;textarea.*?\{\{(.+?)\}\}.*?&lt;\/textarea></regex>
        <rule_desc>Detects instances of insecure page caching in Angular applications that can lead to Cross-Site Scripting (XSS) vulnerabilities in Internet Explorer when interpolating user input within &lt;textarea> elements.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the presence of insecure page caching in Angular applications that can be exploited for Cross-Site Scripting (XSS) attacks in Internet Explorer. This vulnerability occurs when user input within &lt;textarea> elements is not properly escaped or sanitized before being cached, allowing the execution of arbitrary scripts when the cached page is loaded in Internet Explorer.</vuln_desc>
        <developer>Developers should ensure that they implement secure page caching mechanisms in their Angular applications. They should properly escape or sanitize user input before interpolating it within &lt;textarea> elements and avoid caching pages that contain user-specific or sensitive information. Additionally, developers should consider implementing Content Security Policies (CSP) to mitigate the risk of XSS attacks.</developer>
        <reviewer>Reviewers should verify that secure page caching mechanisms are in place for Angular applications. They should ensure that developers have properly escaped or sanitized user input within &lt;textarea> elements and have avoided caching pages that may contain user-specific or sensitive information. Reviewers should also assess the implementation of Content Security Policies (CSP) to mitigate the risk of XSS vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Regular Expression Denial of Service (ReDoS) in Angular versions 1.7.0 and higher</name>
        <regex>NUMBER_FORMATS\.PATTERNS\[1\]\.posPre:\s+' '.repeat\(\)</regex>
        <rule_desc>Detects instances of Regular Expression Denial of Service (ReDoS) vulnerability in Angular versions 1.7.0 and higher, where a custom locale rule allows assigning a very high value to the posPre parameter in NUMBER_FORMATS.PATTERNS[1].posPre.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the presence of a Regular Expression Denial of Service (ReDoS) vulnerability in Angular versions 1.7.0 and higher. Attackers can exploit this vulnerability by providing a custom locale rule that assigns an excessively high value to the posPre parameter in NUMBER_FORMATS.PATTERNS[1].posPre, causing catastrophic backtracking and potential denial of service.</vuln_desc>
        <developer>Developers should be cautious when using custom locale rules in Angular versions 1.7.0 and higher. They should ensure that any user-provided input or dynamically calculated values used in the posPre parameter of NUMBER_FORMATS.PATTERNS[1].posPre are properly validated and constrained to prevent excessive or malicious values that can lead to ReDoS attacks. Additionally, it is recommended to update to a supported and maintained version of Angular to avoid this vulnerability.</developer>
        <reviewer>Reviewers should verify that developers have implemented proper input validation and constraints for user-provided or dynamically calculated values used in the posPre parameter of NUMBER_FORMATS.PATTERNS[1].posPre in Angular versions 1.7.0 and higher. They should also ensure that the application is using a supported and maintained version of Angular to mitigate this vulnerability.</reviewer>
    </rule>
    <rule>
        <name>Cross-Site Scripting (XSS) in Angular.js prior to 1.8.0</name>
        <regex>(<select.*?>\s*<option.*?>.*?<\/option>\s*<\/select>)</regex>
        <rule_desc>Detects instances of Cross-Site Scripting (XSS) vulnerability in Angular.js prior to version 1.8.0, where wrapping <option> elements in <select> ones can change the parsing behavior and potentially unsanitize code.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the presence of a Cross-Site Scripting (XSS) vulnerability in Angular.js prior to version 1.8.0. The regex-based input HTML replacement in Angular.js may unintentionally turn sanitized code into unsanitized code when <option> elements are wrapped in <select> elements, potentially allowing malicious scripts to be executed in the context of the application.</vuln_desc>
        <developer>Developers should update to Angular.js version 1.8.0 or higher to mitigate this vulnerability. If upgrading is not possible, they should avoid wrapping <option> elements in <select> elements when working with user input to prevent unintended unsanitization. Additionally, it is recommended to follow best practices for input validation, output encoding, and proper sanitization of user-generated content to prevent XSS attacks.</developer>
        <reviewer>Reviewers should verify that developers have updated Angular.js to version 1.8.0 or higher to address this vulnerability. If the upgrade is not feasible, they should ensure that developers have implemented measures to avoid wrapping <option> elements in <select> elements when working with user input. Reviewers should also assess the implementation of input validation, output encoding, and sanitization techniques to prevent XSS vulnerabilities in the application.</reviewer>
    </rule>
    <rule>
        <name>Data Delivery without Validation in Angular Versions prior to 1.5.0-beta.0</name>
        <regex>(<dynamic_content>)\s*(<data_to_deliver>)</regex>
        <rule_desc>Detects instances where data is delivered to users along with other trusted dynamic content without proper validation in Angular versions prior to 1.5.0-beta.0.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the presence of a vulnerability in Angular versions prior to 1.5.0-beta.0, where the web application delivers data to users without proper validation, along with other trusted dynamic content. Attackers can exploit this vulnerability by injecting malicious data that may lead to security issues such as Cross-Site Scripting (XSS) or other types of attacks.</vuln_desc>
        <developer>Developers should update to Angular version 1.5.0-beta.0 or higher to mitigate this vulnerability. It is crucial to validate and sanitize all data delivered to users, especially when it is combined with other dynamic content. Developers should implement strong input validation, output encoding, and follow secure coding practices to prevent data delivery vulnerabilities.</developer>
        <reviewer>Reviewers should verify that developers have updated Angular to version 1.5.0-beta.0 or higher to address this vulnerability. They should also assess the implementation of proper data validation and sanitization techniques, specifically when delivering data along with other trusted dynamic content. Reviewers should ensure that the application follows secure coding practices and takes appropriate measures to prevent data delivery vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Prototype Pollution via merge() function in AngularJS before 1.7.9</name>
        <regex>merge\(\).*\.__proto__</regex>
        <rule_desc>Detects instances where the merge() function in AngularJS versions before 1.7.9 can be tricked into adding or modifying properties of Object.prototype using a __proto__ payload.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the presence of a vulnerability in AngularJS versions before 1.7.9, where the merge() function can be manipulated to modify the properties of Object.prototype using a __proto__ payload. Attackers can exploit this vulnerability to add or modify properties of the prototype chain, potentially leading to security issues such as privilege escalation or unintended behavior in the application.</vuln_desc>
        <developer>Developers should update to AngularJS version 1.7.9 or higher to mitigate this vulnerability. It is important to ensure that the merge() function is not susceptible to prototype pollution attacks. Developers should also follow secure coding practices, such as input validation and sanitization, to prevent the injection of malicious payloads.</developer>
        <reviewer>Reviewers should verify that developers have updated AngularJS to version 1.7.9 or higher to address this vulnerability. They should also assess the implementation of the merge() function to confirm that it is not susceptible to prototype pollution attacks. Reviewers should ensure that the application follows secure coding practices and takes appropriate measures to prevent prototype pollution vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Angular Dynamic Code Execution</name>
        <regex>\$eval\s*\(\s*(.*?)\s*\)</regex>
        <rule_desc>Detects the usage of $eval() in Angular, which can lead to dynamic code execution.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of dynamic code execution in Angular. The usage of $eval() can allow the execution of arbitrary code, which can lead to security vulnerabilities such as remote code execution or injection attacks.</vuln_desc>
        <developer>Developers should avoid using $eval() in Angular applications, as it can introduce serious security risks. Instead, they should use safer alternatives provided by Angular, such as data binding or predefined directives. If dynamic code execution is necessary, developers should carefully validate and sanitize user input before passing it to $eval().</developer>
        <reviewer>Reviewers should verify that the usage of $eval() in Angular applications is justified and necessary. They should ensure that developers have implemented proper input validation and sanitization techniques to prevent code injection vulnerabilities. Reviewers should also assess if there are alternative approaches available that avoid the use of $eval() and provide equivalent functionality in a safer manner.</reviewer>
    </rule>
    <rule>
        <name>Missing 'httpOnly' Flag in Angular Cookie</name>
        <regex>httpOnly(\s)*:(\s)*true|httpOnly</regex>
        <rule_desc>Detects the absence of the 'httpOnly' flag in an Angular cookie, which can pose a security risk.</rule_desc>
        <vuln_desc>If this rule matches, it indicates that the 'httpOnly' flag is missing in an Angular cookie. The 'httpOnly' flag is an important security measure that prevents client-side scripts from accessing cookies, thereby mitigating the risk of cross-site scripting (XSS) attacks.</vuln_desc>
        <developer>Developers should ensure that the 'httpOnly' flag is set to true when setting cookies in Angular applications. This can be achieved by providing the 'httpOnly' property with a value of true when setting the cookie using the appropriate Angular API or library.</developer>
        <reviewer>Reviewers should verify that the 'httpOnly' flag is properly set for cookies in Angular applications. They should check if the 'httpOnly' flag is included when cookies are being set, and ensure that client-side scripts cannot access these cookies to prevent potential XSS attacks.</reviewer>
    </rule>
    <rule>
        <name>Missing Content Security Policy Check in Angular</name>
        <regex>\.setHeader\('Content-Security-Policy'</regex>
        <rule_desc>Detects the absence of a Content Security Policy (CSP) check in an Angular application.</rule_desc>
        <vuln_desc>If this rule matches, it indicates that the application is missing a Content Security Policy (CSP) check. A CSP helps prevent the execution of malicious scripts and the loading of unauthorized resources by defining a set of rules that govern the allowed sources for various types of content. Without a CSP, the application is more vulnerable to cross-site scripting (XSS) attacks and other security risks.</vuln_desc>
        <developer>Developers should implement a Content Security Policy (CSP) in their Angular applications to mitigate the risk of XSS attacks and other client-side security vulnerabilities. The CSP should define strict policies for allowed sources of scripts, stylesheets, images, fonts, and other types of content.</developer>
        <reviewer>Reviewers should verify that a Content Security Policy (CSP) is implemented in the Angular application. They should check if the CSP is properly defined and restricts the allowed sources for various types of content. Reviewers should also assess if the CSP policies are effective in mitigating client-side security vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>Remote OS Command Execution - (child_process.exec()) in Angular</name>
        <regex>require( )*(\()( *)('|")child_process('|")( *)(\))</regex>
        <rule_desc>Detects the usage of child_process.exec() in Angular, which can lead to remote OS command execution vulnerabilities.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of remote OS command execution in an Angular application. The usage of child_process.exec() allows the execution of arbitrary commands on the underlying operating system, which can lead to unauthorized access, data leakage, or other malicious activities.</vuln_desc>
        <developer>Developers should avoid using child_process.exec() in Angular applications, as it poses a serious security risk. If command execution is necessary, developers should implement strong input validation and sanitization techniques to prevent command injection vulnerabilities. They should also consider using safer alternatives provided by Angular or implementing server-side validation and execution of commands.</developer>
        <reviewer>Reviewers should verify that the usage of child_process.exec() in Angular applications is justified and necessary. They should ensure that developers have implemented proper input validation and sanitization techniques to prevent command injection vulnerabilities. Reviewers should also assess if there are alternative approaches available that avoid the use of child_process.exec() and provide equivalent functionality in a safer manner.</reviewer>
    </rule>
</root>

