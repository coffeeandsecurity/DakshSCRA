<root>
    <rule>
        <name>SQLi: via Dynamic EXEC Statements</name>
        <regex>(?i)exec\s?\(\@[a-zA-Z0-9]+\)</regex>
        <rule_desc>Detects instances of SQL injection vulnerabilities in dynamic EXEC statements that include an @sql variable.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the presence of a potential SQL injection vulnerability. Attackers can manipulate the @sql variable within the EXEC statement to execute arbitrary SQL code and gain unauthorized access or perform malicious actions on the database.</vuln_desc>
        <developer>Developers should ensure that dynamic EXEC statements using the @sql variable are avoided whenever possible. If they are unavoidable, proper parameterization and validation of the @sql variable should be implemented to mitigate the risk of SQL injection attacks.</developer>
        <reviewer>Reviewers should pay close attention to the usage of dynamic EXEC statements with the @sql variable and verify that secure coding practices, such as parameterized queries or proper input validation and sanitization, are applied to prevent SQL injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>SQLi: via sp_ExecuteSql</name>
        <regex>(?i)(exec\s?sp_ExecuteSql)\s?\@[a-zA-Z0-9]+</regex>
        <rule_desc>Detects instances of SQL injection vulnerabilities in stored procedures that use the sp_ExecuteSql system procedure with dynamic SQL queries.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential presence of a SQL injection vulnerability. Attackers can manipulate the parameters passed to the sp_ExecuteSql procedure to execute arbitrary SQL code, leading to unauthorized access, data disclosure, or other malicious activities.</vuln_desc>
        <developer>Developers should exercise caution when using the sp_ExecuteSql system procedure with dynamic SQL queries. Proper parameterization, validation, and sanitization of the input parameters are crucial to prevent SQL injection attacks.</developer>
        <reviewer>Reviewers should thoroughly examine stored procedures that utilize the sp_ExecuteSql procedure and ensure that secure coding practices, such as parameterized queries or proper input validation and sanitization, are implemented to mitigate the risk of SQL injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>SQLi: via Execute</name>
        <regex>(?i)execute\s(\@|\(|.)</regex>
        <rule_desc>Detects instances of SQL injection vulnerabilities in SQL queries that use the EXECUTE statement.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential presence of a SQL injection vulnerability. Attackers can manipulate the parameters passed to the EXECUTE statement to execute arbitrary SQL code, leading to unauthorized access, data disclosure, or other malicious activities.</vuln_desc>
        <developer>Developers should exercise caution when using the EXECUTE statement in SQL queries. Proper parameterization, validation, and sanitization of the input parameters are crucial to prevent SQL injection attacks.</developer>
        <reviewer>Reviewers should thoroughly examine SQL queries that use the EXECUTE statement and ensure that secure coding practices, such as parameterized queries or proper input validation and sanitization, are implemented to mitigate the risk of SQL injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>SQLi: via Execute sp_executesql</name>
        <regex>(?i)Execute\s+sp_executesql</regex>
        <rule_desc>Detects instances of SQL injection vulnerabilities in SQL queries that use the EXECUTE sp_executesql statement.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential presence of a SQL injection vulnerability. Attackers can manipulate the parameters passed to the EXECUTE sp_executesql statement to execute arbitrary SQL code, leading to unauthorized access, data disclosure, or other malicious activities.</vuln_desc>
        <developer>Developers should exercise caution when using the EXECUTE sp_executesql statement in SQL queries. Proper parameterization, validation, and sanitization of the input parameters are crucial to prevent SQL injection attacks.</developer>
        <reviewer>Reviewers should thoroughly examine SQL queries that use the EXECUTE sp_executesql statement and ensure that secure coding practices, such as parameterized queries or proper input validation and sanitization, are implemented to mitigate the risk of SQL injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>SQLi: SELECT FROM [specific table] WITH WHERE clause</name>
        <regex>SELECT\s+?[^\s]+?\s+?FROM\s+?[^\s]+?\s+?WHERE.*</regex>
        <rule_desc>Detects instances of SELECT statements in SQL queries that retrieve data from a specific table with a WHERE clause.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of SQL injection. Attackers can manipulate the table name or the WHERE clause to alter the query results or introduce additional malicious functionality.</vuln_desc>
        <developer>Developers should ensure that SQL queries using SELECT statements with specific table names and a WHERE clause are properly parameterized or sanitized to prevent SQL injection attacks.</developer>
        <reviewer>Reviewers should verify the presence of secure coding practices, such as parameterized queries or proper input validation and sanitization, specifically for SELECT statements that retrieve data from a specific table with a WHERE clause, to mitigate the risk of SQL injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>SQLi: SELECT statement with ORDER BY clause</name>
        <regex>(SELECT).*(ORDER BY).*</regex>
        <rule_desc>Detects instances of SELECT statements in SQL queries that include an ORDER BY clause.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of SQL injection. Attackers can exploit this vulnerability to manipulate the ORDER BY clause and potentially alter the query results or introduce additional malicious functionality.</vuln_desc>
        <developer>Developers should ensure that SQL queries using SELECT statements with an ORDER BY clause are properly parameterized or sanitized to prevent SQL injection attacks.</developer>
        <reviewer>Reviewers should verify the presence of secure coding practices, such as parameterized queries or proper input validation and sanitization, specifically for SELECT statements that include an ORDER BY clause, to mitigate the risk of SQL injection vulnerabilities.</reviewer>
    </rule>
    <rule>
        <name>SQLi: SELECT with ORDER BY and Input</name>
        <regex>(SELECT).*(ORDER BY).*\s(\@[a-zA-Z]+)</regex>
        <rule_desc>Detects SQL injection vulnerabilities in SELECT statements with an ORDER BY clause and input parameters.</rule_desc>
        <vuln_desc>If this rule matches, it indicates the potential vulnerability of SQL injection. Attackers can manipulate the ORDER BY clause by injecting malicious input through the @InputName parameter, potentially altering query results or introducing additional malicious functionality.</vuln_desc>
        <developer>Developers should ensure that SQL queries using SELECT statements with an ORDER BY clause and input parameters are properly parameterized or sanitized to prevent SQL injection attacks. Input validation and parameter binding techniques should be employed to mitigate the risk of SQL injection vulnerabilities.</developer>
        <reviewer>Reviewers should verify the presence of secure coding practices, such as parameterized queries or proper input validation and sanitization, specifically for SELECT statements that include an ORDER BY clause with an input parameter (@InputName), to mitigate the risk of SQL injection vulnerabilities.</reviewer>
    </rule>
</root>

