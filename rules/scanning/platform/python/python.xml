<root>
    <category name="Untrusted Input Handling or Injection Flaws">
        <rule>
            <name>Untrusted Inputs: request.GET</name>
            <regex>request\.GET</regex>
            <rule_desc>Detects the usage of request.GET, which may contain untrusted inputs.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential vulnerability related to using user input from request.GET without proper validation and sanitization. Attackers can manipulate URL parameters to provide malicious or unexpected values, potentially leading to security vulnerabilities such as injection attacks (SQL, OS, or LDAP), cross-site scripting (XSS), or unauthorized access to sensitive information.</vuln_desc>
            <developer>Developers should carefully validate and sanitize user input received from request.GET before using it in any sensitive operations. They should implement strong input validation, ensuring that only expected and sanitized values are accepted from URL parameters. Additionally, developers should be aware of the risks associated with using user-supplied data and follow secure coding practices, such as parameterized queries, output encoding, and appropriate input filtering techniques, depending on the context in which the input is used.</developer>
            <reviewer>Reviewers should check for appropriate input handling for request.GET. They should assess if developers have implemented proper input validation and sanitization techniques to prevent security vulnerabilities related to untrusted inputs. Reviewers should also verify the usage of output encoding and protection against injection attacks to ensure the secure handling of user input received through URL parameters.</reviewer>
        </rule>
        <rule>
            <name>Untrusted Inputs: request.POST</name>
            <regex>request\.POST</regex>
            <rule_desc>Detects the usage of request.POST, which may contain untrusted inputs.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential vulnerability related to using user input from request.POST without proper validation and sanitization. Attackers can manipulate form data to provide malicious or unexpected values, potentially leading to security vulnerabilities such as injection attacks (SQL, OS, or LDAP), cross-site scripting (XSS), or unauthorized access to sensitive information.</vuln_desc>
            <developer>Developers should carefully validate and sanitize user input received from request.POST before using it in any sensitive operations. They should implement strong input validation, ensuring that only expected and sanitized values are accepted from form submissions. Additionally, developers should be aware of the risks associated with using user-supplied data and follow secure coding practices, such as parameterized queries, output encoding, and appropriate input filtering techniques, depending on the context in which the input is used.</developer>
            <reviewer>Reviewers should check for appropriate input handling for request.POST. They should assess if developers have implemented proper input validation and sanitization techniques to prevent security vulnerabilities related to untrusted inputs. Reviewers should also verify the usage of output encoding and protection against injection attacks to ensure the secure handling of user input received through form submissions.</reviewer>
        </rule>
        <rule>
            <name>Untrusted Inputs: Request Usage with require_GET or require_POST Decorator</name>
            <regex>@require_(GET|POST)[\s\S]*?def\s+(\w+)\(.*?request.*?:</regex>
            <rule_desc>Detects instances where either the require_GET or require_POST decorator is used and the request object is accessed in the view function.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential use of the require_GET or require_POST decorator in conjunction with the request object. This may suggest that the view function expects specific HTTP request methods and should handle them accordingly.</vuln_desc>
            <developer>Developers should ensure that view functions decorated with require_GET or require_POST handle the respective HTTP request methods correctly and securely. It's essential to validate user input and perform necessary security checks when using the request object.</developer>
            <reviewer>Reviewers should verify that view functions decorated with require_GET or require_POST correctly handle the associated HTTP request methods and that the request object is used securely to prevent vulnerabilities.</reviewer>
        </rule>
        <rule>
            <name>Untrusted Inputs: user_input_variable</name>
            <regex>user_input_variable</regex>
            <rule_desc>Detects the usage of user_input_variable, which can introduce untrusted inputs into the code.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential vulnerability of using user input without proper validation and sanitization. Attackers can manipulate input values to provide malicious or unexpected data, potentially leading to security vulnerabilities such as injection attacks (SQL, OS, or LDAP), cross-site scripting (XSS), or remote code execution.</vuln_desc>
            <developer>Developers should validate and sanitize user_input_variable before using it in any sensitive operations. They should implement strong input validation, ensuring that only expected and sanitized values are accepted. Additionally, developers should be cautious about the potential risks associated with using user-supplied data and follow secure coding practices.</developer>
            <reviewer>Reviewers should ensure that proper input handling is in place for user_input_variable. They should verify that developers have implemented appropriate input validation and sanitization techniques to prevent security vulnerabilities related to untrusted inputs. Reviewers should also assess the sensitivity of the data handled and confirm that relevant security measures, such as output encoding and protection against injection attacks, are implemented correctly.</reviewer>
        </rule>
        <rule>
            <name>Insecure Use of Python input() Function</name>
            <regex>input\(\)</regex>
            <rule_desc>Detects potentially insecure usage of Python's input() function for user input.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to the usage of Python's input() function for accepting user input without proper validation and sanitization. Using input() in this way can expose the application to various security risks, including injection vulnerabilities. Developers should implement strong input validation and sanitization when using input() to prevent security vulnerabilities.</vuln_desc>
            <developer>Developers should avoid using input() for untrusted user input. Instead, they should use input() only for non-sensitive, trusted input sources. For untrusted input, developers should implement robust input validation and sanitization techniques.</developer>
            <reviewer>Reviewers should verify that input() is not used for untrusted user input and that appropriate input validation and sanitization measures are applied when accepting user input in Python code.</reviewer>
        </rule>
        <rule>
            <name>Insecure Serialization: pickle and shelve</name>
            <regex>(?i)(pickle\.load\(.*\)|pickle\.loads\(.*\)|shelve\.open\(.*\))</regex>
            <rule_desc>Detects insecure usage of the pickle and shelve modules, which can introduce deserialization vulnerabilities.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential vulnerability of insecure deserialization patterns by looking for calls to `pickle.load()`, `pickle.loads()`, and `shelve.open()` with any arguments. Attackers can exploit insecure deserialization to execute arbitrary code, escalate privileges, or perform other malicious actions.</vuln_desc>
            <developer>Developers should avoid using insecure deserialization practices with pickle and shelve modules. It is crucial to validate and sanitize any serialized data before deserialization and to ensure that serialized data comes from a trusted source.</developer>
            <reviewer>Reviewers should identify instances where insecure deserialization patterns are used with pickle and shelve modules. They should verify that proper input validation and sanitization are applied to mitigate the risk of deserialization vulnerabilities. Additionally, reviewers should assess whether serialized data is sourced from trusted origins.</reviewer>
        </rule>
        <rule>
            <name>Network Calls: urllib2 and socket</name>
            <regex>(?i)(urllib2|socket)</regex>
                <exclude>(?i).*import\s.*</exclude>
            <rule_desc>Detects the usage of network-related modules urllib2 and socket in Python code.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to network operations. The use of urllib2 and socket modules can introduce security risks if not handled securely. Developers should ensure proper input validation and consider security best practices when making network calls using these modules.</vuln_desc>
            <developer>Developers should carefully validate and sanitize any user input used in network-related operations. Additionally, they should follow security best practices when using urllib2 and socket to mitigate potential security risks associated with network calls.</developer>
            <reviewer>Reviewers should verify that the usage of urllib2 and socket modules is secure and that proper input validation and security best practices are followed when making network calls. Any potential security concerns should be flagged for further review and remediation.</reviewer>
        </rule>
        <rule>
            <name>Insecure URL Configuration</name>
            <regex>(?i)(url|re_path)\s*\(\s*['"](\^|\^\/)(?P&lt;url&gt;[^'"]+)['"]</regex>
            <rule_desc>Detects insecure URL configurations in Django's URL patterns.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to insecure URL configurations. Improperly configured URL patterns can lead to security vulnerabilities, such as open redirects or unauthorized access to views. Developers should ensure that URL configurations are properly secured.</vuln_desc>
            <developer>Developers should review and secure their URL configurations to prevent security vulnerabilities. They should avoid using insecure URL patterns and ensure that sensitive views are properly protected.</developer>
            <reviewer>Reviewers should check for insecure URL configurations in Django's URL patterns and assess if proper security measures are in place to prevent open redirects or unauthorized access. They should recommend securing sensitive views and URL patterns.</reviewer>
        </rule>
        <rule>
            <name>YAML Loading: Use safe_load</name>
            <regex>yaml\.load\((?!.*Loader=yaml\.FullLoader)(.*?)\)</regex>
            <rule_desc>Detects the usage of yaml.load without specifying the Loader as yaml.FullLoader, which may lead to potential security risks.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to using yaml.load without specifying yaml.FullLoader as the Loader. This practice can lead to security vulnerabilities if the loaded YAML contains Python code or constructors. Using yaml.safe_load or specifying yaml.FullLoader is recommended to ensure safe loading of YAML data.</vuln_desc>
            <developer>Developers should use yaml.safe_load or specify yaml.FullLoader when loading YAML data to prevent potential code execution vulnerabilities and ensure the safe construction of Python objects from the YAML data.</developer>
            <reviewer>Reviewers should verify that YAML loading in the codebase uses yaml.safe_load or specifies yaml.FullLoader to ensure the safe handling of YAML data and mitigate potential security risks related to arbitrary code execution or dangerous object construction.</reviewer>
        </rule>
    </category>

    <category name="Insecure File Operations">
        <rule>
            <name>Insecure File Operations</name>
            <regex>(?i)(os\.remove|os\.unlink|shutil\.rmtree)</regex>
            <rule_desc>Detects the use of file removal functions in Python that may operate on untrusted file paths, potentially leading to security risks.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential vulnerability of untrusted file operations. Operating on untrusted file paths can lead to arbitrary file deletion and other security issues.</vuln_desc>
            <developer>Developers should validate and sanitize file paths and restrict file operations to trusted directories when removing files or directories.</developer>
            <reviewer>Reviewers should verify that file operations in the codebase are performed on trusted file paths and that proper input validation is in place to prevent security risks related to file operations.</reviewer>
        </rule>
    </category>
    
    <category name="Information Disclosure">
        <rule>
            <name>Stack Trace or Error Disclosure</name>
            <regex>(?i)(traceback\.format_exc\(\)|traceback\.print_exc\(\)|print\(.*Exception.*\))</regex>
            <rule_desc>Detects code that exposes stack traces or sensitive error information in Python applications.</rule_desc>
            <vuln_desc>Using `traceback.print_exc()` or printing exceptions directly can expose sensitive details like file paths, method names, and line numbers to attackers.</vuln_desc>
            <developer>Developers should use structured logging frameworks like Python's `logging` module to capture exceptions securely without exposing them to end-users.</developer>
            <reviewer>Reviewers should ensure that sensitive stack trace information is not printed or exposed to end-users and verify proper use of logging practices.</reviewer>
        </rule>
    </category>

    <category name="Database Queries">
        <rule>
            <name>Insecure SQL Queries: raw and extra</name>
            <regex><![CDATA[(?i)^[^#]*\.\s*(raw|extra)\s*\(\s*]]></regex>
            <rule_desc>Detects insecure SQL queries using the "raw" and "extra" methods in Python.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to insecure SQL queries. The use of "raw" and "extra" methods can lead to SQL injection vulnerabilities if user input is not properly validated or sanitized. Developers should ensure secure handling of SQL queries to prevent such vulnerabilities.</vuln_desc>
            <developer>Developers should avoid using "raw" and "extra" methods for SQL queries, especially with unvalidated user input. Instead, they should use parameterized queries or other secure methods to prevent SQL injection vulnerabilities.</developer>
            <reviewer>Reviewers should check for the usage of "raw" and "extra" methods in SQL queries and assess if proper input validation and sanitization are applied to mitigate the risk of SQL injection vulnerabilities. They should recommend using parameterized queries or secure SQL query-building methods.</reviewer>
        </rule>

        <rule>
            <name>SQL Query: SELECT Statements with WHERE or ORDER BY</name>
            <regex><![CDATA[(?i)\bSELECT\s+?\*?\s+?FROM\s+[^\s]+\s+(WHERE|ORDER BY)\b.*]]></regex>
            <rule_desc>Detects instances of SELECT statements with WHERE or ORDER BY clauses in SQL queries, which may be vulnerable to SQL injection if user input is not handled securely.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the use of potentially vulnerable SELECT statements with WHERE or ORDER BY clauses. Improper handling of user input in these clauses can lead to SQL injection, allowing attackers to manipulate query behavior and gain unauthorized access to data.</vuln_desc>
            <developer>Developers should validate and implement secure alternatives by using parameterized queries with placeholders or bindings to prevent SQL injection risks.</developer>
            <reviewer>Reviewers should check for insecure usage of SELECT statements with WHERE or ORDER BY clauses, verifying the use of parameterized queries and input sanitization to prevent SQL injection.</reviewer>
        </rule>

        <rule>
            <name>SQL Query: Unrestricted SELECT *</name>
            <regex><![CDATA[\bSELECT\s+\*\s+FROM\b]]></regex>
            <rule_desc>Detects "SELECT * FROM" in SQL queries, which can expose unnecessary or sensitive data.</rule_desc>
            <vuln_desc>If this rule matches, it suggests that the query retrieves more data than necessary, potentially exposing sensitive information and increasing the attack surface.</vuln_desc>
            <developer>Developers should validate existing queries and specify only the required columns to prevent unnecessary data exposure.</developer>
            <reviewer>Reviewers should check for insecure implementation using "SELECT *" and ensure only essential columns are specified to limit data exposure risks.</reviewer>
        </rule>

        <rule>
            <name>SQL Query: Direct DELETE with User Input</name>
            <regex><![CDATA[(?i)\bDELETE\s+FROM\s+[^\s]+\s+WHERE\s+.*=.*\$.*]]></regex>
            <rule_desc>Detects DELETE statements using user input directly without parameterization, increasing SQL injection risks.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potentially insecure DELETE query that could be exploited for SQL injection.</vuln_desc>
            <developer>Developers should avoid using user input directly in DELETE statements. Use parameterized queries to prevent SQL injection.</developer>
            <reviewer>Reviewers should check if user input is used in DELETE statements and verify that secure parameterization methods are applied.</reviewer>
        </rule>

        <rule>
            <name>SQL Query: Subqueries with User Input</name>
            <regex><![CDATA[(?i)\bSELECT\s+[^\s]+\s+FROM\s+\((SELECT\s+.*\$.*)\)]]></regex>
            <rule_desc>Detects nested subqueries with user input, which can lead to SQL injection vulnerabilities if input is not parameterized.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a nested query that may allow SQL injection if user input is not validated or parameterized securely.</vuln_desc>
            <developer>Developers should use parameterized queries and validate any user input used within subqueries to prevent injection vulnerabilities.</developer>
            <reviewer>Reviewers should inspect subqueries that incorporate user input and confirm if parameterization and input validation are enforced.</reviewer>
        </rule>

    </category>
    
    <category name="Command Injection">
        <rule>
            <name>Command Injection: subprocess</name>
            <regex>subprocess\.run\(.*\)</regex>
            <rule_desc>Detects instances of subprocess.run() that can lead to command injection vulnerabilities if used with untrusted input.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential vulnerability of command injection. Attackers can exploit subprocess.run() with unsanitized user input to execute arbitrary shell commands, potentially leading to unauthorized access, data loss, remote code execution, or other malicious activities.</vuln_desc>
            <developer>Developers should avoid using subprocess.run() with untrusted user input whenever possible. If their usage is necessary, it is crucial to employ strict input validation, input sanitization, and command parameterization techniques to prevent command injection attacks. Developers should also consider using safer alternatives or language constructs that mitigate command execution risks.</developer>
            <reviewer>Reviewers should check for the secure usage of subprocess.run() and assess if user input is properly validated, sanitized, and appropriately used as command parameters. They should ensure that developers have implemented strong input validation measures, command parameterization techniques, and proper context-aware security controls to mitigate command injection vulnerabilities. Reviewers should also validate if safe alternatives or language constructs have been considered to minimize the risks associated with shell command execution.</reviewer>
        </rule>
        <rule>
            <name>Subprocess Modules: os.system, os.spawn, os.popen, popen2., os.kill, commands.</name>
            <regex>(?i)(os\.system|os\.spawn|os\.popen|popen2\.|os\.kill|commands\.)</regex>
            <rule_desc>Detects the usage of subprocess-related modules and functions in Python code.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to subprocess handling. The use of subprocess-related functions and modules can introduce security risks if not handled securely. Developers should ensure proper input validation, sanitization, and security measures when executing system commands or managing subprocesses.</vuln_desc>
            <developer>Developers should carefully validate and sanitize any user input used in subprocess-related operations. They should also follow security best practices when using subprocess functions and modules to mitigate potential security risks associated with subprocess handling.</developer>
            <reviewer>Reviewers should verify that the usage of subprocess-related functions and modules is secure and that proper input validation, sanitization, and security best practices are followed when handling subprocesses. Any potential security concerns should be flagged for further review and remediation.</reviewer>
        </rule>
        <rule>
            <name>Command Injection: eval()</name>
            <regex>(^|\s|=\s?)eval\(</regex>
            <rule_desc>Detects instances of eval() that can lead to command injection vulnerabilities if used with untrusted input.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential vulnerability of command injection. Attackers can exploit eval() with unsanitized user input to execute arbitrary code, potentially leading to unauthorized access, data loss, remote code execution, or other malicious activities.</vuln_desc>
            <developer>Developers should avoid using eval() with untrusted user input whenever possible. If its usage is necessary, it is crucial to employ strict input validation, input sanitization, and command parameterization techniques to prevent command injection attacks. Developers should also consider using safer alternatives or language constructs that mitigate command execution risks.</developer>
            <reviewer>Reviewers should check for the secure usage of eval() and assess if user input is properly validated, sanitized, and appropriately used as command parameters. They should ensure that developers have implemented strong input validation measures, command parameterization techniques, and proper context-aware security controls to mitigate command injection vulnerabilities. Reviewers should also validate if safe alternatives or language constructs have been considered to minimize the risks associated with shell command execution.</reviewer>
        </rule>
    </category>
    
    <category name="Arbitrary Code Execution">
        <rule>
            <name>Arbitrary Code Execution: eval()</name>
            <regex>\beval\(.+\)</regex>
            <rule_desc>Detects the usage of eval() function, which can lead to arbitrary code execution vulnerabilities.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the potential vulnerability of code injection. Attackers can exploit the eval() function to execute arbitrary code, potentially gaining unauthorized access, compromising data integrity, or executing malicious actions on the server.</vuln_desc>
            <developer>Developers should avoid using eval() function whenever possible. If its usage is unavoidable, it is crucial to validate and sanitize any user-supplied input before passing it to eval(). Developers should explore safer alternatives or restrict the execution to a limited and controlled environment.</developer>
            <reviewer>Reviewers should identify the presence of eval() function and assess if user input is directly passed to eval(). They should verify that proper input validation and sanitization are applied to mitigate the risk of arbitrary code execution vulnerabilities. Additionally, reviewers should encourage the use of safer alternatives and evaluate the execution context to minimize potential harm.</reviewer>
        </rule>
    </category>
    
    <category name="Session and State Management">
        <rule>
            <name>Insecure Session Cookies or CSRF Tokens Configuration</name>
            <regex>(?i)\b(SESSION_COOKIE_SECURE|CSRF_COOKIE_SECURE)\s*=\s*False\b</regex>
            <rule_desc>Detects potential security vulnerabilities related to insecure session cookies or CSRF token configurations in Django and similar Python web frameworks.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security vulnerability. Insecure settings for session cookies (SESSION_COOKIE_SECURE=False) or CSRF tokens (CSRF_COOKIE_SECURE=False) can expose the application to security risks, including session hijacking and cross-site request forgery (CSRF) attacks. Developers should ensure that session cookies are set as secure (SESSION_COOKIE_SECURE=True) and that CSRF tokens are correctly configured (CSRF_COOKIE_SECURE=True) to enhance the security of the application.</vuln_desc>
            <developer>Developers should review and update the configuration settings for session cookies and CSRF tokens in the application's security settings. Ensure that SESSION_COOKIE_SECURE is set to True to make session cookies secure (HTTPS-only), and set CSRF_COOKIE_SECURE to True to enhance protection against CSRF attacks.</developer>
            <reviewer>Reviewers should verify that the SESSION_COOKIE_SECURE and CSRF_COOKIE_SECURE settings are appropriately configured as True in the application's security settings. Insecure configurations (False) should be flagged as potential security vulnerabilities and should be addressed by developers.</reviewer>
        </rule>
    </category>
    
    <category name="Deprecated Functions">
        <rule>
            <name>Deprecated Python Functions</name>
            <regex>(?i)\b(urllib2|commands)\b</regex>
            <rule_desc>Detects the use of deprecated Python functions and modules.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to the use of deprecated Python functions or modules. Deprecated functions and modules may have security vulnerabilities or lack support in newer Python versions. Developers should update their code to use recommended alternatives.</vuln_desc>
            <developer>Developers should replace deprecated functions and modules with recommended alternatives to ensure code security and compatibility with newer Python versions.</developer>
            <reviewer>Reviewers should identify and flag the use of deprecated Python functions or modules in the codebase and recommend updating them to modern alternatives.</reviewer>
        </rule>
    </category>
    
    <category name="Insecure Implementation or Permissions">
        <!--    # This rule is extreamly verbose. Use it only if you know how to filter out what you need.
        <rule>
            <name>Decorators Usage and Placement</name>
            <regex>@\w+\s*(\([^)]*\))?\s*(def\s+\w+\s*\()?</regex>
            <rule_desc>Identifies decorators used in the code and checks their placement.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the presence of decorators in the code. Review the usage and placement of decorators to ensure they are correctly applied where needed and not missed where they are required. Additionally, check for decorators that apply exceptions and review them for potential security issues.</vuln_desc>
            <developer>Developers should use decorators judiciously and ensure they are correctly placed on functions or methods where they are needed. Carefully review decorators that apply exceptions to ensure they do not introduce security vulnerabilities.</developer>
            <reviewer>Reviewers should verify the usage and placement of decorators in the codebase. Ensure that decorators are correctly applied where needed and not omitted where required. Pay special attention to decorators that apply exceptions and assess them for potential security concerns.</reviewer>
        </rule> -->
        <rule>
            <name>HTTP Decorators: Insecure or Commonly Abused Methods</name>
            <regex>(@require_http_methods\s*\(\s*\["(?:GET|PUT|DELETE|.*?)"\]\))|(@require_GET)</regex>
            <rule_desc>Detects the usage of insecure or commonly abused HTTP decorators.</rule_desc>
            <vuln_desc>If this rule matches, it indicates either the usage of the @require_http_methods decorator permitting insecure HTTP methods (e.g., GET, PUT, DELETE) or the presence of @require_GET. Review the usage of these decorators to ensure they are applied correctly and consider whether security measures are in place, especially when sensitive information is transmitted via GET requests.</vuln_desc>
            <developer>Developers should use the @require_http_methods decorator judiciously and only permit insecure HTTP methods when absolutely necessary. Ensure that it is applied to views where it is needed to restrict or specify the allowed HTTP methods, and consider the security implications of permitting insecure methods. When using @require_GET, take care to implement additional security measures if required.</developer>
            <reviewer>Reviewers should verify the correct usage of the @require_http_methods decorator and the presence of @require_GET in the codebase. Ensure that these decorators are applied appropriately to restrict or specify the allowed HTTP methods for views. Pay particular attention to the security implications of permitting insecure methods (GET, PUT, DELETE) and assess whether additional security measures are in place to mitigate risks.</reviewer>
        </rule>
        <rule>
            <name>CSRF Exempt Decorators</name>
            <regex>@(csrf_exempt)</regex>
            <rule_desc>Detects decorators that exempt views from CSRF protection.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the presence of decorators that exempt views from CSRF protection. Review these decorators to ensure they are used judiciously and do not introduce security vulnerabilities.</vuln_desc>
            <developer>Developers should use CSRF exempt decorators sparingly and ensure they are applied only where necessary. Carefully review the purpose and security implications of each exemption applied by these decorators.</developer>
            <reviewer>Reviewers should verify the usage of CSRF exempt decorators in the codebase. Ensure that these decorators are correctly applied and consider their impact on security. Pay particular attention to exemptions that may introduce security risks.</reviewer>
        </rule>
    </category>
    
    <category name="Software and Library Version Detection">
        <rule>
            <name>Library Version Check</name>
            <regex>@\w+_version</regex>
            <rule_desc>Detects the version of the software and various libraries used in the code.</rule_desc>
            <vuln_desc>If this rule matches, it indicates the presence of version information for a library. Review the library versions to ensure they are current and not outdated or End of Life (EoL).</vuln_desc>
            <developer>Developers should regularly check and update libraries to the latest versions to ensure security and stability. Avoid using outdated or EoL library versions whenever possible.</developer>
            <reviewer>Reviewers should verify the library versions used in the codebase and check if they are up-to-date. Identify and report any outdated or EoL library versions that may pose security or compatibility risks.</reviewer>
        </rule>
    </category>
    <!--
    <category name="Missing Mitigations">
    </category> -->
    
    <category name="Insecure Mitigations">
        <rule>
            <name>Insecure Mitigation: Django Safe Filter django.utils.safestring</name>
            <regex>(?i)\.safestring</regex>
            <rule_desc>Detects the potentially insecure usage of the Django Safe Filter (django.utils.safestring), which may indicate an insufficient security mitigation approach.</rule_desc>
            <vuln_desc>If this rule matches, it suggests a potential vulnerability related to the use of the Django Safe Filter. Relying solely on the Safe Filter without additional security measures may leave the application susceptible to Cross-Site Scripting (XSS) attacks if not used correctly. It is recommended to complement the Safe Filter with proper output encoding and validation to ensure robust security mitigation against XSS.</vuln_desc>
            <developer>Developers are advised to avoid relying solely on the Django Safe Filter for XSS mitigation. Instead, they should use it in conjunction with proper output encoding and validation to prevent XSS vulnerabilities effectively.</developer>
            <reviewer>Reviewers should verify that the Django Safe Filter (django.utils.safestring) is used in a secure manner, with additional security measures such as output encoding and validation applied to prevent XSS vulnerabilities. Ensure that developers have not solely depended on the Safe Filter for security mitigation.</reviewer>
        </rule>
        <rule>
            <name>Insecure Use of Django mark_safe</name>
            <regex>(?i)\.mark_safe\(\s*["']</regex>
            <rule_desc>Detects potentially insecure usage of Django's mark_safe function, which can lead to Cross-Site Scripting (XSS) vulnerabilities.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to the usage of Django's mark_safe function without proper output encoding. This can expose the application to Cross-Site Scripting (XSS) attacks if not used correctly. It is recommended to use mark_safe in conjunction with proper output encoding and validation to ensure robust security mitigation against XSS.</vuln_desc>
            <developer>Developers should avoid using mark_safe in isolation for XSS mitigation. It should be used alongside proper output encoding and validation to prevent XSS vulnerabilities effectively.</developer>
            <reviewer>Reviewers should verify that mark_safe is used securely, with additional security measures such as output encoding and validation applied to prevent XSS vulnerabilities. Ensure that developers have not solely depended on mark_safe for security mitigation.</reviewer>
        </rule>
        <rule>
            <name>Insecure Use of Django csrf_exempt Decorator</name>
            <regex>(?i)@csrf_exempt</regex>
            <rule_desc>Detects potentially insecure usage of Django's @csrf_exempt decorator.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to the usage of Django's @csrf_exempt decorator without proper justification. This can expose the application to Cross-Site Request Forgery (CSRF) vulnerabilities. It is recommended to use @csrf_exempt sparingly and only when necessary, with a clear understanding of the associated security risks.</vuln_desc>
            <developer>Developers should avoid using @csrf_exempt without a strong justification. When used, it should be thoroughly documented, and alternative security mechanisms should be considered to mitigate CSRF vulnerabilities.</developer>
            <reviewer>Reviewers should verify the usage of @csrf_exempt and assess whether it is justified and adequately documented. They should ensure that alternative CSRF protection measures are considered where appropriate.</reviewer>
        </rule>
        <rule>
            <name>Insecure Use of Django @login_required Decorator</name>
            <regex>(?i)@login_required</regex>
            <rule_desc>Detects potentially insecure usage of Django's @login_required decorator.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to the usage of Django's @login_required decorator without proper context and additional security measures. This can expose sensitive views to unauthorized access. Developers should ensure that @login_required is used appropriately and that access controls are enforced for sensitive operations.</vuln_desc>
            <developer>Developers should use @login_required with caution, ensuring that it is applied to views that require authentication and authorization. Sensitive operations should have proper access controls in place.</developer>
            <reviewer>Reviewers should verify the usage of @login_required and assess whether it is applied to views that require authentication. They should also confirm the presence of appropriate access controls for sensitive operations.</reviewer>
        </rule>
        <rule>
            <name>Using Django's Safe Filter</name>
            <regex>(?i)\.safe_filter\s*\(\s*</regex>
            <rule_desc>Detects the use of Django's Safe Filter without proper sanitization.</rule_desc>
            <vuln_desc>If this rule matches, it indicates a potential security concern related to the use of Django's Safe Filter without proper sanitization. Using Safe Filter without ensuring that the content is safe can lead to Cross-Site Scripting (XSS) vulnerabilities.</vuln_desc>
            <developer>Developers should only use Django's Safe Filter on content that has been properly sanitized and validated to be safe from XSS attacks.</developer>
            <reviewer>Reviewers should check for the use of Django's Safe Filter and assess if the content passed to it is properly sanitized and validated to prevent XSS vulnerabilities.</reviewer>
        </rule>
    </category>
</root>
