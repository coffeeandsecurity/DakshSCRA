<root>
    <category name="Untrusted Input Handling or Injection Flaws">
        <rule>
            <!-- Applicable for C++ -->
            <name>Untrusted Inputs: cin / getline</name>
            <regex><![CDATA[\b(?:std::cin|getline)\b]]></regex>
            <rule_desc>Detects usage of standard input functions that can introduce untrusted input into the program.</rule_desc>
            <vuln_desc>If matched, this indicates potential vulnerabilities from untrusted input without validation. Malicious inputs can lead to buffer overflows, injection attacks, or unexpected behavior.</vuln_desc>
            <developer>Developers should validate and sanitize input received through `cin` and `getline` to prevent injection attacks. Consider setting length limits and using regex patterns to filter input where applicable.</developer>
            <reviewer>Reviewers should ensure proper input handling for functions like `cin` or `getline`. They should confirm that developers have implemented input validation techniques to handle edge cases and ensure safe processing.</reviewer>
        </rule>
        
        <rule>
            <!-- Applicable for C and C++ -->
            <name>Command Injection: system() and popen()</name>
            <regex><![CDATA[\b(?:system|popen)\b\s*\(]]></regex>
            <rule_desc>Detects the usage of functions that execute shell commands, potentially leading to command injection vulnerabilities.</rule_desc>
            <vuln_desc>If matched, this indicates a potential command injection vulnerability if user input is passed unsafely. This can allow attackers to execute arbitrary commands.</vuln_desc>
            <developer>Developers should avoid passing user input to `system()` or `popen()`. Where necessary, input should be validated, and safer alternatives should be considered (e.g., `std::filesystem::copy`).</developer>
            <reviewer>Reviewers should look for instances where user input is passed to `system()` or `popen()` and confirm that validation and sanitization are in place. Encouraging safer alternatives should also be part of the review.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C and C++ -->
            <name>Risky External Command Execution: system(), exec()</name>
            <regex><![CDATA[\b(system|exec|popen)\s*\(]]></regex>
            <rule_desc>Detects the usage of command execution functions that may introduce security risks.</rule_desc>
            <vuln_desc>Using these functions without proper input sanitization can lead to command injection vulnerabilities.</vuln_desc>
            <developer>Prefer using safer APIs or wrappers, such as `boost::process` or other platform-specific libraries.</developer>
            <reviewer>Ensure all inputs to these functions are sanitized or escape unsafe characters appropriately.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C and C++ -->
            <name>Unsafe Loop Handling Over Arrays or Vectors</name>
            <regex><![CDATA[\b(for|while)\s*\(.*]]></regex>
            <rule_desc>Detects loops iterating over arrays, vectors, or strings.</rule_desc>
            <vuln_desc>Improperly bounded loops can cause buffer or integer overflows, compromising program stability.</vuln_desc>
            <developer>Use bounds-checked loops, such as range-based `for` loops, to prevent overflows.</developer>
            <reviewer>Ensure all loops use proper bounds to avoid access violations.</reviewer>
        </rule>
    </category>

    <category name="Memory Safety Issues">
        <rule>
            <!-- Applicable for C and C++ -->
            <name>Unsafe String Manipulation: strcpy(), strcat(), sprintf()</name>
            <regex><![CDATA[\b(strcpy|strcat|sprintf)\s*\(]]></regex>
            <rule_desc>Detects usage of unsafe string manipulation functions that can lead to buffer overflows.</rule_desc>
            <vuln_desc>These functions are not safe for use with untrusted input and can cause buffer overflows or memory corruption.</vuln_desc>
            <developer>Use `std::string` or `std::snprintf()` to handle strings safely in C++.</developer>
            <reviewer>Reviewers should look for unsafe string functions and ensure safe C++ standard library alternatives are used.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C++ -->
            <name>Unsafe Use of std::vector::at()</name>
            <regex><![CDATA[\bstd::vector<.*>::at\(\s*\d+\s*\)]]></regex>
            <rule_desc>Detects unsafe access to `std::vector` elements without boundary checks.</rule_desc>
            <vuln_desc>Out-of-range access can cause exceptions or undefined behavior.</vuln_desc>
            <developer>Ensure vector access is within bounds.</developer>
            <reviewer>Check for proper error handling during vector access.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C++ -->
            <name>Dangling Pointer: delete without nullptr</name>
            <regex><![CDATA[\bdelete\s+\b(?:[^\s]+)\b]]></regex>
            <rule_desc>Detects use of `delete` without setting the pointer to `nullptr`, which can result in dangling pointers.</rule_desc>
            <vuln_desc>Using `delete` without setting the pointer to `nullptr` can cause dangling pointers, leading to undefined behavior or security vulnerabilities.</vuln_desc>
            <developer>Developers should set pointers to `nullptr` after deletion to prevent dangling references. Using smart pointers (like `std::unique_ptr`) is recommended for automatic memory management.</developer>
            <reviewer>Reviewers should ensure that pointers are set to `nullptr` after deletion, or smart pointers are employed to handle memory safely.</reviewer>
        </rule>

        <rule>
            <name>Access to Freed Memory</name>
            <regex><![CDATA[\bfree\s*\(|delete\s*\[?\]?]]></regex>
            <rule_desc>Detects access to memory that has already been freed.</rule_desc>
            <vuln_desc>Using memory after it has been freed can lead to undefined behavior, crashes, or security vulnerabilities.</vuln_desc>
            <developer>Set pointers to `nullptr` after freeing or deleting memory to avoid reuse.</developer>
            <reviewer>Look for any use-after-free patterns in the code, especially in complex control flows.</reviewer>
        </rule>
    </category>

    <category name="Memory Management and Allocation">
        <rule>
            <!-- Applicable for C++ -->
            <name>Potential Memory Leak: Use of `new` Operator Without `delete`</name>
            <regex><![CDATA[\bnew\s+\w+(?![^<>]*\s*>)]]></regex>
            <rule_desc>Detects dynamic memory allocation with `new` but no corresponding `delete`, which can lead to memory leaks.</rule_desc>
            <vuln_desc>Manual memory management using `new` requires explicit `delete` calls to release memory. If not handled correctly, it can result in memory leaks, degrading performance and stability.</vuln_desc>
            <developer>Use `delete` for each `new` allocation or leverage smart pointers like `std::unique_ptr` or `std::shared_ptr` to automate memory management and prevent leaks.</developer>
            <reviewer>Ensure dynamic allocations are either managed through smart pointers or properly released using `delete` if raw pointers are unavoidable.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C++ -->
            <name>Null Pointer Dereference with Smart Pointers</name>
            <regex><![CDATA[\b(std::unique_ptr|std::shared_ptr)<.*>\s*=\s*nullptr]]></regex>
            <rule_desc>Detects potential misuse of smart pointers, leading to null pointer dereference.</rule_desc>
            <vuln_desc>Smart pointers should be properly checked before use to avoid dereferencing null values.</vuln_desc>
            <developer>Perform null checks on smart pointers before dereferencing them.</developer>
            <reviewer>Ensure all smart pointers are validated before use.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C and C++ -->
            <name>Access to Freed Memory</name>
            <regex><![CDATA[\bfree\s*\(|delete\s*\[?\]?]]></regex>
            <rule_desc>Detects potential access to memory that has already been freed.</rule_desc>
            <vuln_desc>Using memory after it has been freed can lead to undefined behavior, crashes, or security vulnerabilities.</vuln_desc>
            <developer>Set pointers to `nullptr` after freeing or deleting memory to avoid reuse.</developer>
            <reviewer>Look for any use-after-free patterns in the code, especially in complex control flows.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C and C++ -->
            <name>Unsafe Use of realloc()</name>
            <regex><![CDATA[\brealloc\s*\(]]></regex>
            <rule_desc>Detects usage of `realloc()` which may modify object alignment.</rule_desc>
            <vuln_desc>Changing the alignment of objects through `realloc()` can lead to undefined behavior.</vuln_desc>
            <developer>Consider alternatives to `realloc()` for resizing memory, ensuring alignment remains correct.</developer>
            <reviewer>Check if memory resizing affects object alignment or introduces memory access issues.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C++ -->
            <name>Memory Deallocation: delete vs. delete[]</name>
            <regex><![CDATA[\bdelete\s+\[?\]?]]></regex>
            <rule_desc>Detects improper usage of `delete` vs. `delete[]` for memory deallocation.</rule_desc>
            <vuln_desc>Using `delete` on an array allocated with `new[]` can lead to undefined behavior.</vuln_desc>
            <developer>Use `delete[]` for arrays allocated with `new[]` to ensure proper deallocation of memory.</developer>
            <reviewer>Ensure that the appropriate deallocation function (`delete` vs. `delete[]`) is used based on how memory was allocated.</reviewer>
        </rule>
    </category>

    <category name="Arithmetic and Numeric Errors">
        <rule>
            <!-- Applicable for C and C++ -->
            <name>Integer Overflow or Wraparound</name>
            <regex><![CDATA[\b(int|short|unsigned)\s+\w+\s*=\s*\w+\s*\+\s*(\d{5,}|INT_MAX|UINT_MAX);]]></regex>
            <rule_desc>Detects arithmetic operations prone to overflow or wraparound.</rule_desc>
            <vuln_desc>Operations involving large constants or values near boundaries may cause integer overflows or wraparound, leading to undefined behavior or security vulnerabilities.</vuln_desc>
            <developer>Use safe arithmetic libraries or perform boundary checks to prevent overflow.</developer>
            <reviewer>Ensure arithmetic operations include overflow protection mechanisms, such as boundary checks or safer arithmetic functions.</reviewer>
        </rule>
    </category>

    <category name="Type Safety and Casting">
        <rule>
            <!-- Applicable for C++ -->
            <name>Unsafe Type Conversion: reinterpret_cast</name>
            <regex><![CDATA[\breinterpret_cast<[^>]+>\(]]></regex>
            <rule_desc>Detects the usage of `reinterpret_cast`, which can lead to unsafe type conversions.</rule_desc>
            <vuln_desc>If matched, this indicates a potential vulnerability due to incorrect or dangerous type casting, possibly resulting in undefined behavior or security issues.</vuln_desc>
            <developer>Developers should use `reinterpret_cast` cautiously, ensuring the cast is necessary and safe. Where possible, safer alternatives like `static_cast` should be preferred.</developer>
            <reviewer>Reviewers should check for the proper use of `reinterpret_cast` and assess whether safer casting techniques could be applied. They should also validate the correctness of such casts.</reviewer>
        </rule>
    </category>

    <category name="Exception Safety and Resource Management">
        <rule>
            <!-- Applicable for C++ -->
            <name>Resource Leak on Exception</name>
            <regex><![CDATA[\btry\s*{[^}]*new\s+\w+]]></regex>
            <rule_desc>Detects dynamic memory allocations inside `try` blocks that may lead to memory leaks if an exception is thrown.</rule_desc>
            <vuln_desc>If an exception occurs before resources are released, it can result in memory leaks or resource exhaustion.</vuln_desc>
            <developer>Use RAII (Resource Acquisition Is Initialization) patterns or smart pointers to ensure proper resource cleanup, even if exceptions are thrown.</developer>
            <reviewer>Reviewers should confirm that resources are managed using RAII or released safely in `catch` blocks to prevent leaks.</reviewer>
        </rule>
    </category>

    <category name="File Handling and Permissions">
        <rule>
            <!-- Applicable for C++ -->
            <name>Unsafe File Creation with Incorrect Permissions</name>
            <regex><![CDATA[\bstd::ofstream\s*\(]]></regex>
            <rule_desc>Detects the use of `std::ofstream` for file creation without specifying secure permissions.</rule_desc>
            <vuln_desc>Files created with `std::ofstream` may have insecure default permissions, potentially exposing sensitive data to unauthorized access.</vuln_desc>
            <developer>Use `umask()` or platform-specific APIs to enforce appropriate file permissions during creation.</developer>
            <reviewer>Ensure that files are created with correct permissions to prevent unauthorized access to sensitive data.</reviewer>
        </rule>
    </category>

    <category name="Format String Vulnerabilities">
        <rule>
            <!-- Applicable for C++ -->
            <name>Format String Misuse in C++ Streams</name>
            <regex><![CDATA[\b(std::printf|std::fprintf)\s*\(]]></regex>
            <rule_desc>Detects unsafe use of format strings with `printf`-like functions.</rule_desc>
            <vuln_desc>Using untrusted input as a format string may introduce vulnerabilities similar to those in C.</vuln_desc>
            <developer>Always use fixed format strings when printing user input to avoid format string vulnerabilities.</developer>
            <reviewer>Check for any direct use of user input in format strings.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C and C++ -->
            <name>Potential Format String Attack</name>
            <regex><![CDATA[\b(printf|fprintf|sprintf|vsprintf)\s*\(\s*[^"]+\s*,]]></regex>
            <rule_desc>Detects usage of format functions with potentially unsafe input.</rule_desc>
            <vuln_desc>Format string attacks can expose memory content or execute arbitrary code.</vuln_desc>
            <developer>Use format specifiers and avoid direct user input.</developer>
            <reviewer>Ensure input sanitization and safe usage of format functions.</reviewer>
        </rule>
    </category>

    <category name="Privilege Management">
        <rule>
            <!-- Applicable for C and C++ -->
            <name>Insecure Handling of Privileged Operations</name>
            <regex><![CDATA[\b(setuid|setgid|initgroups)\s*\(]]></regex>
            <rule_desc>Detects the use of privilege-changing functions and ensures proper handling practices.</rule_desc>
            <vuln_desc>Failure to drop privileges correctly or improper use of privilege-dropping functions may lead to privilege escalation vulnerabilities.</vuln_desc>
            <developer>Follow the correct sequence: `initgroups()` → `setgid()` → `setuid()`. Ensure error codes are checked and privileges are dropped early in the program.</developer>
            <reviewer>Review privilege management logic to ensure correct ordering, error handling, and that privilege changes are handled securely.</reviewer>
        </rule>
    </category>

    <category name="Process Environment Issues">
        <rule>
            <!-- Applicable for C and C++ -->
            <name>Unsafe Use of Environment Variables</name>
            <regex><![CDATA[\b(std::getenv)\s*\(]]></regex>
            <rule_desc>Detects use of `std::getenv()` for accessing environment variables.</rule_desc>
            <vuln_desc>Accessing environment variables for sensitive data exposes information to risks, as environment values can be manipulated or accessed by other processes.</vuln_desc>
            <developer>Use more secure mechanisms (e.g., IPC or sockets) for sensitive data transmission. Avoid using `std::getenv()` for passwords or secrets.</developer>
            <reviewer>Verify that environment variables are not used to store or transmit sensitive data.</reviewer>
        </rule>
    </category>

    <category name="Sensitive Information Handling">
        <rule>
            <!-- Applicable for C++, but concepts are relevant in C -->
            <name>Insecure Handling of Sensitive Data</name>
            <regex><![CDATA[\b(memset|mlock|setrlimit|unlink|remove|std::string)\s*\(]]></regex>
            <rule_desc>Detects the improper handling of sensitive data.</rule_desc>
            <vuln_desc>Using immutable strings (like `std::string`) for passwords can result in sensitive data being retained in memory longer than necessary. Improper deletion may lead to information leakage.</vuln_desc>
            <developer>Use arrays or custom data structures instead of `std::string` for sensitive information. Overwrite buffers using `memset()` before releasing memory, and apply `mlock()` to prevent swapping.</developer>
            <reviewer>Check that sensitive data is managed using mutable structures and erased properly before releasing memory.</reviewer>
        </rule>
    </category>

    <category name="Concurrency and Race Conditions">
        <rule>
            <!-- Applicable for C++ code using std::thread -->
            <name>Race Condition: std::thread without mutex</name>
            <regex><![CDATA[\bstd::thread\b\s*\(]]></regex>
            <rule_desc>Detects the usage of threads without mutex protection, which can lead to race conditions.</rule_desc>
            <vuln_desc>If matched, this indicates that shared data might not be protected properly, leading to race conditions and undefined behavior.</vuln_desc>
            <developer>Developers should use mutexes (`std::mutex`) or other synchronization mechanisms to protect shared data accessed by multiple threads.</developer>
            <reviewer>Reviewers should ensure that appropriate synchronization primitives, such as mutexes or atomic variables, are used with `std::thread` to avoid race conditions.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C and C++ code using pthreads -->
            <name>Race Condition with Shared Resource</name>
            <regex><![CDATA[\bpthread_create\s*\(.*\);\s*.*\s*=.*shared_var]]></regex>
            <rule_desc>Detects potential race conditions in multi-threaded applications.</rule_desc>
            <vuln_desc>Race conditions occur when multiple threads access shared resources simultaneously.</vuln_desc>
            <developer>Use mutexes or semaphores to synchronize access.</developer>
            <reviewer>Check that shared resources are properly synchronized.</reviewer>
        </rule>
    </category>

    <category name="Declarations and Initialization">
        <rule>
            <!-- Applicable for C++ -->
            <name>C-style Variadic Functions: Potential for Type Safety Issues</name>
            <regex><![CDATA[\b(__attribute__\s*\(\s*format\s*\(\s*__variadic\s*,)]]></regex>
            <rule_desc>Detects the definition of C-style variadic functions, which can lead to type safety issues.</rule_desc>
            <vuln_desc>Using variadic functions can introduce risks due to the lack of type checking, potentially leading to undefined behavior.</vuln_desc>
            <developer>Consider alternatives that provide type safety, as variadic functions can lead to serious security vulnerabilities.</developer>
            <reviewer>Investigate the use of variadic functions and assess their impact on type safety and security.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C++ -->
            <name>Information Leakage Across Trust Boundaries: Security Risk</name>
            <regex><![CDATA[\bclass\s+\w+\s*\(]]></regex>
            <rule_desc>Detects passing class objects that may leak sensitive information across trust boundaries.</rule_desc>
            <vuln_desc>Improper handling of class objects can expose internal state or sensitive data, posing security threats.</vuln_desc>
            <developer>Encapsulate sensitive data within objects to avoid leakage during transitions across trust boundaries.</developer>
            <reviewer>Investigate class interfaces for potential information leakage that could be exploited.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C++ -->
            <name>Static Object Initialization Cycles: Undefined Behavior Risk</name>
            <regex><![CDATA[\bstatic\s+\w+\s*\(]]></regex>
            <rule_desc>Detects potential cycles during the initialization of static objects, which can lead to undefined behavior.</rule_desc>
            <vuln_desc>Initialization cycles can cause static initialization order issues, leading to crashes or undefined states.</vuln_desc>
            <developer>Use function-local static variables or ensure initialization order is well-defined to avoid issues.</developer>
            <reviewer>Investigate static object initializations for potential cycles that could lead to undefined behavior.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C++ -->
            <name>Exceptions in Destructors: Risk of Unhandled Behavior</name>
            <regex><![CDATA[\bthrow\s*\(]]></regex>
            <rule_desc>Detects exceptions thrown from destructors or deallocation functions.</rule_desc>
            <vuln_desc>Throwing exceptions from destructors can cause program termination and resource leaks, posing security risks.</vuln_desc>
            <developer>Catch and handle exceptions within destructors or deallocation functions to prevent unexpected behavior.</developer>
            <reviewer>Investigate destructors that may throw exceptions, ensuring proper handling to avoid security issues.</reviewer>
        </rule>

        <rule>
            <!-- Applicable for C and C++ -->
            <name>Information Leakage with Structures: Security Concern</name>
            <regex><![CDATA[\bstruct\s+\w+\s*\{]]></regex>
            <rule_desc>Detects passing structures across trust boundaries, potentially leaking sensitive information.</rule_desc>
            <vuln_desc>Improper handling of structures can expose sensitive data across boundaries, leading to security vulnerabilities.</vuln_desc>
            <developer>Encapsulate sensitive data within structures and provide secure access methods for crossing trust boundaries.</developer>
            <reviewer>Investigate structures for potential information leakage that could be exploited.</reviewer>
        </rule>
    </category>
</root>
